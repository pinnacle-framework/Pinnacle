"text"
"Common"
"issues"
"in"
"AI-data"
"development#"
"\n"
"Traditionally,"
"AI"
"development"
"and"
"databases"
"have"
"lived"
"in"
"separate"
"silo-ed"
"worlds,"
"which"
"only"
"interact"
"as"
"an"
"afterthought"
"at"
"the"
"point"
"where"
"a"
"production"
"system"
"is"
"required"
"to"
"apply"
"an"
"AI"
"model"
"to"
"a"
"row"
"or"
"table"
"in"
"a"
"database"
"and"
"store"
"and"
"serve"
"the"
"resulting"
"predictions."
"\n"
"Let’s"
"see"
"how"
"this"
"can"
"play"
"out"
"in"
"practice."
"\n"
"Suppose"
"our"
"situation"
"is"
"as"
"follows:"
"\n"
"We"
"have"
"data"
"in"
"production"
"populated"
"by"
"users"
"accessing"
"a"
"popular"
"website,"
"and"
"which"
"sends"
"JSON"
"records"
"to"
"MongoDB,"
"with"
"references"
"to"
"web"
"URLs"
"hosted"
"on"
"a"
"separate"
"image"
"server."
"\n"
"Each"
"record"
"contains"
"some"
"data"
"left"
"behind"
"by"
"users"
"which"
"may"
"be"
"useful"
"for"
"training"
"a"
"classification"
"model."
"\n"
"Given"
"this"
"data,"
"we"
"would"
"like"
"to"
"accomplish"
"the"
"following:"
"\n"
"We"
"would"
"like"
"to"
"use"
"our"
"data"
"hosted"
"in"
"MongoDB"
"to"
"train"
"a"
"model"
"to"
"classify"
"images"
"\n"
"We"
"want"
"to"
"use"
"the"
"probabilistic"
"estimates"
"for"
"the"
"classifications"
"in"
"a"
"production"
"scenario"
"\n"
"To"
"do"
"this,"
"we"
"need"
"to"
"be"
"able"
"to"
"implement"
"these"
"high"
"level"
"steps:"
"\n"
"Access"
"the"
"images"
"and"
"data"
"in"
"a"
"way"
"enabling"
"training"
"a"
"computer-vision"
"classification"
"model"
"\n"
"Train"
"the"
"model"
"on"
"the"
"accessible"
"images"
"and"
"associated"
"labels"
"\n"
"Once"
"the"
"model"
"is"
"trained,"
"deploy"
"it"
"in"
"a"
"way"
"so"
"that"
"incoming"
"user"
"data’s"
"images"
"are"
"classified"
"using"
"his"
"model"
"in"
"as"
"timely"
"a"
"manner"
"as"
"possible."
"\n"
"Consume"
"the"
"outputs"
"of"
"the"
"model"
"in"
"the"
"functionality"
"of"
"the"
"website"
"\n"
"Pre-2023,"
"this"
"is"
"an"
"extremely"
"arduous"
"task."
"In"
"order"
"to"
"get"
"a"
"model"
"working"
"using"
"this"
"data,"
"and"
"working"
"with"
"this"
"deployment,"
"we"
"would"
"typically"
"be"
"required"
"to"
"perform"
"something"
"equivalent"
"to"
"the"
"following"
"sequence"
"of"
"tasks"
"(module"
"cloud"
"provider,"
"exact"
"software"
"choices)."
"\n"
"Download"
"a"
"snapshot"
"of"
"his"
"data"
"from"
"MongoDB"
"and"
"place"
"in"
"an"
"AWS"
"s3"
"bucket."
"\n"
"Write"
"a"
"script"
"to"
"run"
"through"
"all"
"of"
"the"
"images"
"mentioned"
"in"
"the"
"BSON"
"records"
"downloaded,"
"and"
"download"
"these"
"to"
"a"
"fast-access"
"hard"
"drive,"
"in"
"elastic"
"block"
"storage"
"\n"
"Write"
"a"
"new"
"script"
"which"
"processes"
"the"
"data"
"downloaded"
"from"
"MongoDB,"
"extracting"
"a"
"dataframe"
"of"
"labels"
"and"
"image"
"URIs"
"in"
"s3."
"He"
"has"
"to"
"take"
"care"
"not"
"to"
"make"
"book-keeping"
"errors"
"in"
"the"
"process."
"\n"
"Prepare"
"the"
"model"
"for"
"training,"
"using"
"for"
"example,"
"torchvision,"
"to"
"preprocess"
"the"
"images"
"for"
"batching"
"using"
"GPUs,"
"and"
"torch"
"for"
"writing"
"the"
"model"
"forward"
"pass."
"\n"
"To"
"perform"
"training,"
"spin"
"up"
"an"
"EC2"
"instance,"
"or"
"use"
"AWS"
"Sagemaker."
"Often"
"the"
"lock-in"
"nature"
"of"
"AWS"
"Sagemaker"
"staves"
"off"
"a"
"large"
"percentage"
"of"
"users."
"This"
"means"
"defining"
"AWS"
"Cloudformation"
"templates"
"allowing"
"us"
"to"
"easily"
"start"
"a"
"training"
"instance,"
"mount"
"the"
"hard-drive"
"containing"
"the"
"images,"
"and"
"stop"
"the"
"instance"
"with"
"an"
"AWS"
"lambda"
"function"
"after"
"completion."
"\n"
"If"
"the"
"model"
"is"
"declared"
"sufficient,"
"we"
"move"
"to"
"building"
"a"
"production"
"pipeline."
"Again,"
"to"
"avoid,"
"vendor"
"lock-in,"
"we"
"might"
"opt"
"for"
"the"
"open-source"
"Apache"
"Airflow."
"We"
"build"
"a"
"DAG"
"using"
"Airflow,"
"which"
"periodically"
"checks"
"for"
"records"
"which"
"are"
"have"
"yet"
"to"
"be"
"classified"
"in"
"MongoDB,"
"loads"
"data"
"from"
"the"
"database"
"and"
"dumps"
"this"
"into"
"an"
"s3"
"bucket,"
"downloads"
"the"
"images"
"referred"
"to"
"in"
"this"
"data,"
"loads"
"the"
"model"
"and"
"applies"
"preprocessing"
"to"
"the"
"images,"
"followed"
"by"
"running"
"the"
"model"
"over"
"this"
"data,"
"and"
"finally"
"applying"
"post-processing"
"to"
"the"
"outputs."
"The"
"classifications"
"are"
"then"
"made"
"human"
"readable,"
"looking"
"up"
"indices"
"in"
"a"
"lookup"
"table"
"we"
"provide."
"The"
"classifications"
"are"
"finally"
"inserted"
"back"
"to"
"MongoDB,"
"along"
"with"
"the"
"probabilistic"
"estimates"
"from"
"the"
"PyTorch"
"model."
"\n"
"In"
"performing"
"6.,"
"we"
"are"
"required"
"to"
"provide"
"our"
"model"
"in"
"a"
"way"
"which"
"may"
"be"
"consumed"
"by"
"the"
"production"
"system."
"We"
"defines"
"a"
"new"
"inference"
"only"
"preprocessor"
"which"
"may"
"be"
"used"
"by"
"the"
"torch"
"model,"
"writes"
"a"
"script"
"which"
"re-instantiates"
"his"
"model"
"from"
"the"
"parameters"
"applied"
"in"
"training,"
"and"
"also"
"an"
"additional"
"script"
"responsible"
"for"
"the"
"bookkeeping"
"between"
"the"
"forward"
"pass"
"outputs,"
"and"
"the"
"human"
"readable"
"probabilistic"
"predictions."
"\n"
"This"
"story"
"may"
"sound"
"super"
"familiar"
"to"
"AI"
"developers"
"and"
"data"
"scientists."
"It"
"can"
"cause"
"delays"
"of"
"months"
"or"
"longer,"
"in"
"deploying"
"even"
"standard"
"use-cases"
"to"
"production."
"There"
"are"
"indeed"
"tools"
"out"
"there"
"which"
"smoothen"
"the"
"journey"
"to"
"consuming"
"AI"
"through"
"the"
"database"
"-"
"Zen"
"ML,"
"Comet"
"ML,"
"etc.."
"However,"
"these"
"simply"
"make"
"each"
"step"
"in"
"this"
"complex"
"sequence"
"easier"
"to"
"execute."
"\n"
"What"
"if,"
"by"
"shifting"
"the"
"focus"
"from"
"model"
"centricity,"
"to"
"database"
"centricity,"
"we"
"could"
"simplify"
"matters"
"considerably?"
"\n"
"This"
"is"
"where"
"SuperDuperDB"
"comes"
"in."
"Let’s"
"look"
"at"
"how"
"SuperDuperDB"
"might"
"allow"
"Jim"
"to"
"work:"
"\n"
"We"
"register"
"the"
"“user”"
"collection"
"in"
"MongoDB"
"with"
"SuperDuperDB,"
"configuring"
"the"
"fact"
"that"
"the"
"URLs"
"point"
"to"
"image"
"URIs"
"with"
"SuperDuperDB’s"
"inbuilt"
"encoder"
"system."
"This"
"induces"
"SuperDuperDB"
"to"
"spring"
"into"
"action"
"every"
"time"
"data"
"is"
"updated"
"in"
"the"
"user"
"collection."
"SuperDuperDB"
"automatically"
"downloads"
"the"
"URIs"
"to"
"MongoDB"
"and"
"visible"
"to"
"the"
"models"
"installed"
"in"
"SuperDuperDB,"
"ready"
"for"
"training"
"and"
"inference."
"\n"
"We"
"program"
"preprocess"
"and"
"postprocess"
"python"
"functions"
"on"
"his"
"class"
"and"
"wrap"
"these"
"together"
"with"
"the"
"PyTorch"
"model"
"with"
"a"
"single"
"wrapper"
"pinnacle."
"We"
"import"
"a"
"SuperDuperDB"
"client,"
"and"
"pass"
"the"
"client"
"and"
"a"
"MongoDB"
"style"
"query"
"q"
"="
"collection.find({'img':"
"{'$exists':"
"1}})"
"to"
"the"
".fit"
"method"
"of"
"the"
"wrapped"
"model."
"\n"
"SuperDuperDB"
"springs"
"into"
"action,"
"uploading"
"the"
"model"
"to"
"SuperDuperDB,"
"and"
"triggering"
"model"
"training"
"on"
"SuperDuperDB’s"
"dask"
"worker"
"pool."
"Once"
"finished,"
"metrics"
"and"
"model-state"
"are"
"preserved"
"in"
"the"
"configured"
"artifact"
"store."
"\n"
"Using,"
"one"
"command,"
"model.predict('img',"
"select=q,"
"listen=True),"
"Jim"
"installs"
"the"
"model"
"on"
"the"
"user"
"collection,"
"so"
"that"
"as"
"new"
"data"
"are"
"inserted,"
"the"
"model"
"is"
"evaluated"
"in"
"inference"
"model,"
"the"
"predictions"
"postprocessed,"
"and"
"human"
"readable"
"outputs"
"are"
"inserted"
"to"
"the"
"user"
"collection."
"\n"
"With"
"SuperDuperDB"
"setup"
"in"
"this"
"way,"
"and"
"models"
"configured"
"to"
"operate"
"on"
"the"
"“user”"
"collection,"
"the"
"deployment"
"reacts"
"automatically"
"to"
"changes"
"in"
"the"
"“user”"
"collection"
"and"
"model"
"outputs"
"are"
"continuously"
"integrated"
"back"
"into"
"the"
"database."
"\n"
"Background"
"of"
"SuperDuperDB#"
"\n"
"On"
"this"
"sub-page"
"we"
"describe"
"how"
"the"
"need"
"and"
"vision"
"of"
"SuperDuperDB"
"epinnacles"
"from"
"real-world"
"use-cases,"
"and"
"requirements."
"\n"
"Contents#"
"\n"
"How"
"did"
"we"
"get"
"here?#"
"\n"
"SuperDuperDB"
"was"
"born"
"out"
"of"
"the"
"need"
"to"
"work"
"quickly"
"and"
"flexibly"
"with"
"AI"
"models"
"in"
"conjunction"
"with"
"a"
"database"
"of"
"individual"
"“entities”,"
"as"
"for"
"instance"
"commonly"
"encountered"
"in"
"content-based"
"recommendation"
"and"
"semantic"
"search."
"\n"
"For"
"example,"
"in"
"e-Commerce,"
"product"
"data"
"is"
"often"
"multi-faceted,"
"involving:"
"\n"
"Multiple"
"textual"
"attributes,"
"which"
"are"
"hierarchically"
"organized"
"and"
"not"
"of"
"equivalent"
"relevance"
"\n"
"Multiple"
"images,"
"which"
"may"
"have"
"different"
"significance"
"for"
"customers"
"\n"
"In"
"order"
"to"
"make"
"sense"
"of"
"this"
"data"
"using"
"AI,"
"a"
"canonical"
"approach"
"is"
"to"
"achieve"
"a"
"vectorial"
"embedding"
"of"
"each"
"of"
"the"
"sub-attributes/"
"images"
"and"
"also"
"a"
"single"
"embedding"
"of"
"the"
"entire"
"document."
"This"
"implies:"
"\n"
"Maintaining"
"a"
"database"
"of"
"outputs"
"for"
"each"
"of"
"several"
"models,"
"applied"
"to"
"each"
"of"
"the"
"sub-entities."
"\n"
"Updating"
"this"
"database"
"whenever"
"new"
"data"
"comes"
"in"
"\n"
"Monitoring"
"the"
"performance"
"of"
"models,"
"as"
"new"
"data"
"comes"
"in"
"\n"
"Once"
"we"
"have"
"a"
"database"
"of"
"vectors/"
"features"
"for"
"each"
"of"
"the"
"entities"
"(products)"
"in"
"the"
"database,"
"then"
"these"
"can"
"be"
"used"
"in"
"downstream"
"tasks."
"For"
"example:"
"\n"
"Vector-search"
"\n"
"Building"
"models"
"on"
"top"
"of"
"these"
"features,"
"e.g."
"classifiers"
"\n"
"In"
"addition,"
"once"
"we"
"have"
"features"
"for"
"several"
"collections"
"or"
"tables"
"or"
"data,"
"these"
"can"
"be"
"“semantically"
"joined”."
"This"
"might"
"mean,"
"for"
"example:"
"\n"
"Conditioning"
"vector-search"
"on"
"additional"
"inputs"
"(e.g."
"product"
"search,"
"conditioned"
"on"
"user"
"embeddings)"
"\n"
"Training"
"cross-modality"
"search,"
"for"
"instance,"
"aligning"
"textual"
"queries"
"resulting"
"for"
"typed"
"queries,"
"with"
"product"
"features."
"\n"
"From"
"this"
"point"
"of"
"view,"
"we"
"believe"
"that"
"the"
"ultimate"
"production"
"enviroment"
"for"
"AI,"
"is"
"a"
"database,"
"where"
"all"
"documents/"
"rows"
"are"
"game"
"to"
"be"
"fed"
"through"
"AI"
"models,"
"and"
"the"
"outputs"
"may"
"be"
"saved"
"in"
"the"
"database,"
"to"
"be"
"used"
"downstream"
"as"
"inputs"
"to"
"further"
"AI"
"models,"
"and"
"for"
"use"
"in"
"vector-search,"
"and"
"further"
"approaches"
"to"
"navigating"
"data"
"with"
"AI"
"models."
"This"
"is"
"an"
"extension"
"of"
"the"
"now-standard"
"vector-database"
"paradigm,"
"which"
"enables"
"documents"
"to"
"be"
"encoded"
"as"
"vectors"
"and"
"for"
"these"
"to"
"be"
"searched."
"We"
"believe"
"that"
"the"
"vector-database"
"paradigm"
"is"
"unnecessarily"
"limiting,"
"as"
"evidenced,"
"for"
"example,"
"by"
"the"
"fact"
"that"
"vectors"
"are"
"simultaneously"
"featurizations"
"of"
"their"
"documents,"
"and"
"logically"
"can"
"and"
"should"
"be"
"used"
"in"
"additional"
"machine"
"learning/"
"AI"
"tasks."
"\n"
"Desiderata"
"for"
"AI-data"
"environment#"
"\n"
"In"
"building"
"SuperDuperDB,"
"considering"
"this"
"background,"
"we"
"wanted"
"to"
"build"
"an"
"AI-data"
"environment"
"whicih"
"could"
"do"
"the"
"following:"
"\n"
"Important"
"\n"
"Any"
"row"
"(row+column)"
"or"
"document"
"(subdocument/"
"subfield)"
"of"
"data"
"should"
"be"
"game"
"to"
"be"
"processed"
"by"
"configured"
"AI"
"models"
"\n"
"This"
"is"
"inline"
"with"
"the"
"background"
"of"
"individual"
"documents"
"corresponding"
"to"
"entities"
"in"
"the"
"application-domain."
"For"
"instance,"
"in"
"e-Commerce,"
"one"
"wants"
"to"
"be"
"able"
"to"
"encode"
"individual"
"attributes,"
"as"
"well"
"as"
"entire"
"products"
"using"
"AI-models."
"\n"
"Important"
"\n"
"AI"
"models"
"should"
"be"
"built"
"and"
"defined"
"in"
"a"
"way"
"that"
"they"
"can"
"read"
"data"
"directly"
"from"
"the"
"database"
"and"
"produce"
"outputs"
"which"
"may"
"be"
"written"
"back"
"to"
"the"
"database"
"\n"
"Only"
"if"
"this"
"is"
"achieved,"
"is"
"it"
"possible"
"to"
"automate"
"computation"
"whereby"
"a"
"model"
"is"
"reloaded"
"and"
"applied"
"to"
"incoming"
"data."
"\n"
"Important"
"\n"
"AI"
"outputs"
"should"
"also"
"be"
"considered"
"data,"
"in"
"order"
"to"
"enable"
"outputs"
"to"
"be"
"used"
"as"
"input"
"features"
"\n"
"By"
"saving"
"AI-outputs"
"to"
"the"
"database,"
"our"
"system"
"becomes"
"essentially"
"recursive."
"We"
"can"
"configure"
"further"
"models"
"to"
"consume"
"the"
"outputs"
"of"
"upstream"
"models."
"This"
"is"
"a"
"vital"
"component"
"of"
"modern"
"AI."
"\n"
"Important"
"\n"
"AI"
"models"
"should"
"be"
"configurable"
"to"
"optionally"
"depend"
"on"
"upstream"
"models"
"\n"
"This"
"and"
"the"
"previous"
"point"
"are"
"two"
"sides"
"of"
"the"
"same"
"coin."
"If"
"model"
"outputs"
"are"
"treatable"
"as"
"data,"
"then"
"we"
"still"
"want"
"to"
"order"
"model"
"computations,"
"to"
"respect"
"the"
"fact"
"that"
"certain"
"models"
"depend"
"on"
"the"
"computations"
"of"
"their"
"upstream"
"models,"
"for"
"feasibility."
"\n"
"Important"
"\n"
"The"
"environment"
"should"
"be"
"flexible"
"enough"
"to"
"enable"
"AI"
"models"
"with"
"diverse"
"inputs"
"and"
"outputs"
"\n"
"This"
"is"
"an"
"absolute"
"must"
"if"
"we"
"are"
"to"
"cater"
"to"
"the"
"most"
"promising"
"recent"
"areas"
"in"
"AI,"
"including"
"computer"
"vision,"
"video"
"comprehension,"
"speech"
"recognition"
"and"
"generation,"
"and"
"more."
"\n"
"SuperDuperDB"
"architecture#"
"\n"
"Here"
"is"
"a"
"detailed"
"schematic"
"of"
"how"
"SuperDuperDB"
"operates:"
"\n"
"Change"
"data"
"capture#"
"\n"
"SuperDuperDB"
"has"
"been"
"designed"
"from"
"the"
"ground"
"up"
"to"
"provide"
"first"
"class"
"support"
"for"
"keeping"
"AI"
"predictions"
"up-to-date"
"with"
"database"
"changes."
"\n"
"If"
"MongoDB"
"is"
"deployed"
"in"
"standalone"
"mode,"
"then"
"changes"
"are"
"detected"
"by"
"the"
"same"
"process"
"as"
"data"
"is"
"inserted,"
"resp.,"
"updated"
"and"
"deleted"
"by."
"\n"
"For"
"deployments"
"involving"
"multiple"
"stakeholders,"
"and"
"roles,"
"this"
"may"
"be"
"overly"
"restrictive."
"Data"
"inserts"
"and"
"updates"
"may"
"occur"
"from:"
"\n"
"CI/"
"CD"
"processes"
"triggering"
"data"
"ingestion"
"to"
"MongoDB"
"\n"
"Ingestion/"
"updates"
"from"
"non-SuperDuperDB"
"client"
"libraries:"
"\n"
"pymongo"
"\n"
"The"
"MongoDB"
"shell:"
"mongo"
"\n"
"Client"
"libraries"
"from"
"non-Python"
"programming"
"languages"
"\n"
"SuperDuperDB"
"aims"
"to"
"allow"
"it’s"
"AI"
"models"
"to"
"be"
"updated"
"and"
"kept"
"in-sync"
"with"
"changes"
"from"
"all"
"of"
"the"
"above"
"sources."
"\n"
"Correspondingly,"
"the"
"DatabaseListener"
"class"
"is"
"a"
"Python"
"implementation"
"of"
"a"
"Change"
"Data"
"Capture"
"(CDC)"
"solution"
"for"
"MongoDB."
"It"
"allows"
"you"
"to"
"monitor"
"changes"
"in"
"a"
"specified"
"collection"
"by"
"utilizing"
"a"
"daemon"
"thread"
"that"
"listens"
"to"
"the"
"change"
"stream."
"\n"
"Usage#"
"\n"
"Import"
"the"
"necessary"
"dependencies:"
"\n"
"Instantiate"
"a"
"DatabaseListener"
"object"
"by"
"providing"
"the"
"MongoDB"
"database"
"and"
"the"
"collection"
"to"
"be"
"monitored:"
"\n"
"Start"
"the"
"listener"
"thread"
"to"
"initiate"
"the"
"change"
"stream"
"monitoring:"
"\n"
"See"
"here"
"for"
"an"
"example"
"of"
"usage"
"of"
"CDC."
"\n"
"Client-server"
"implementation#"
"\n"
"So"
"that"
"users"
"are"
"able"
"to"
"access"
"SuperDuperDB"
"from"
"remote"
"servers/"
"client-side,"
"we"
"provide"
"a"
"client-server"
"implementation"
"to"
"do"
"this."
"Note"
"that"
"this"
"is"
"not"
"strictly"
"necessary"
"to"
"profit"
"from"
"SuperDuperDB"
"functionality."
"Another"
"logical"
"usage"
"pattern"
"for"
"remote"
"servers,"
"would"
"be"
"to"
"access"
"the"
"environment"
"from"
"outside"
"using"
"a"
"Jupyter"
"notebook"
"service,"
"deployed"
"with"
"local"
"network"
"access"
"to"
"the"
"Dask"
"cluster"
"and"
"change"
"data"
"capture"
"components."
"\n"
"To"
"start"
"the"
"server,"
"use"
"the"
"CLI:"
"\n"
"The"
"client"
"may"
"be"
"used"
"from"
"a"
"Python"
"program"
"as"
"follows:"
"\n"
"Cluster#"
"\n"
"There"
"are"
"3"
"features"
"of"
"a"
"SuperDuperDB"
"cluster:"
"\n"
"When"
"users"
"access"
"SuperDuperDB,"
"they"
"invoke"
"the"
"SuperDuperDB"
"client"
"which"
"manages"
"communication"
"with"
"the"
"various"
"components"
"of"
"the"
"SuperDuperDB"
"cluster."
"\n"
"Data"
"storage:"
"occurs"
"in"
"MongoDB,"
"where"
"the"
"raw"
"data,"
"[models](Models"
"-"
"an"
"extension"
"of"
"PyTorch"
"models)"
"and"
"model"
"outputs"
"are"
"stored."
"\n"
"Job"
"management:"
"whenever"
"SuperDuperDB"
"creates"
"a"
"[job](Jobs"
"-"
"scheduling"
"of"
"training"
"and"
"model"
"outputs)"
"(i.e."
"during"
"data"
"inserts,"
"updates,"
"downloads,"
"and"
"model"
"training),"
"a"
"job"
"is"
"queued"
"and"
"then"
"executed"
"by"
"a"
"pool"
"of"
"workers."
"\n"
"Querying"
"SuperDuperDB:"
"when"
"using"
"queries"
"which"
"use"
"tensor"
"similarity,"
"the"
"SuperDuperDB"
"client"
"combines"
"calls"
"to"
"MongoDB"
"with"
"calls"
"to"
"the"
"linear-algebra"
"component."
"\n"
"SuperDuperDB"
"includes"
"a"
"model-server,"
"which"
"may"
"be"
"used"
"to"
"serve"
"the"
"models"
"which"
"have"
"been"
"uploaded"
"to"
"SuperDuperDB."
"\n"
"The"
"exact"
"setup"
"of"
"your"
"SuperDuperDB"
"cluster"
"will"
"depend"
"on"
"the"
"use-cases"
"you"
"plan"
"to"
"execute"
"with"
"the"
"cluster."
"Factors"
"to"
"consider"
"will"
"be:"
"\n"
"Latency"
"\n"
"Where"
"the"
"MongoDB"
"deployment"
"is"
"located"
"\n"
"Whether"
"you"
"want"
"to"
"scale"
"the"
"cluster"
"according"
"to"
"demand"
"\n"
"What"
"hardware"
"you’d"
"like"
"to"
"run"
"\n"
"And"
"more…"
"\n"
"Components#"
"\n"
"The"
"basic"
"topology"
"of"
"a"
"SuperDuperDB"
"cluster"
"is"
"given"
"in"
"the"
"graphic"
"below:"
"\n"
"Client#"
"\n"
"The"
"client"
"is"
"analagous"
"to"
"the"
"client"
"used"
"in"
"MongoDB."
"This"
"is"
"the"
"programmer’s"
"interface"
"to"
"the"
"SuperDuperDB"
"cluster"
"and"
"provides"
"a"
"unified"
"user-experience"
"very"
"similar"
"to"
"the"
"MongoDB"
"user"
"experience."
"\n"
"MongoDB#"
"\n"
"This"
"is"
"a"
"standard"
"MongoDB"
"deployment."
"The"
"deployment"
"can"
"either"
"sit"
"in"
"the"
"same"
"infrastructure"
"as"
"the"
"remainder"
"of"
"the"
"SuperDuperDB"
"cluster,"
"or"
"it"
"can"
"be"
"situated"
"remotely."
"Performance"
"and"
"latency"
"concerns"
"here"
"will"
"play"
"a"
"role"
"in"
"which"
"version"
"works"
"best"
"and"
"is"
"most"
"convenient."
"\n"
"Linear"
"algebra#"
"\n"
"This"
"node"
"returns"
"real"
"time"
"semantic"
"index"
"search"
"outputs"
"to"
"the"
"client."
"The"
"node"
"loads"
"model"
"outputs"
"which"
"are"
"of"
"vector"
"or"
"tensor"
"type,"
"and"
"creates"
"an"
"in-memory"
"search"
"index"
"over"
"them."
"\n"
"Model-server#"
"\n"
"SuperDuperDB"
"contains"
"a"
"component"
"which"
"serves"
"models"
"which"
"has"
"been"
"created."
"\n"
"Worker#"
"\n"
"These"
"nodes"
"perform"
"the"
"long"
"computations"
"necessary"
"to"
"update"
"model"
"outputs"
"when"
"new"
"data"
"come"
"in,"
"and"
"also"
"perform"
"model"
"training"
"for"
"models"
"which"
"are"
"set"
"up"
"to"
"be"
"trained"
"on"
"creation."
"\n"
"Basic"
"local"
"cluster"
"setup#"
"\n"
"The"
"following"
"config.json"
"and"
"supervisord.conf"
"configuration"
"runs"
"a"
"test"
"cluster"
"on"
"the"
"localhost:"
"\n"
"Configuration#"
"\n"
"pinnacledb/misc/config.py"
"contains"
"a"
"complete"
"definition"
"using"
"pydantic"
"of"
"the"
"default"
"configuration."
"This"
"may"
"be"
"overridden"
"using"
"a"
"configs.json"
"file"
"containing"
"in"
"the"
"working"
"directory."
"\n"
"There"
"are"
"three"
"ways"
"to"
"set"
"a"
"config"
"variable"
"\n"
"put"
"just"
"the"
"values"
"you"
"want"
"to"
"change"
"in"
"a"
"file"
"configs.json"
"at"
"the"
"room"
"of"
"pinnacledb-stealth"
"\n"
"set"
"an"
"environment"
"variable"
"with"
"the"
"value"
"\n"
"set"
"it"
"in"
"code"
"\n"
"For"
"example,"
"these"
"three"
"forms"
"are"
"identical:"
"\n"
"Storing"
"{""remote"":"
"True,"
"""dask"":"
"{""ip"":"
"""1.1.1.1""}}"
"in"
"configs.json"
"\n"
"Setting"
"environment"
"variables"
"pinnacleDB_REMOTE=true"
"and"
"pinnacleDB_DASK_IP=1.1.1.1"
"\n"
"In"
"Python,"
"CFG.remote"
"="
"True;"
"CFG.dask.ip"
"="
"'1.1.1.1'"
"\n"
"Here"
"is"
"what"
"the"
"default"
"config"
"object"
"looks"
"like"
"in"
"JSON"
"format:"
"\n"
"SuperDuperDB"
"Cluster#"
"\n"
"SuperDuperDB"
"may"
"be"
"operated"
"as"
"a"
"cluter"
"in"
"distributed"
"mode,"
"with"
"a"
"client-server"
"for"
"communication"
"for"
"production"
"use-cases."
"In"
"this"
"section"
"of"
"the"
"documentation"
"we"
"describe"
"how"
"to"
"set"
"this"
"up."
"\n"
"In"
"cluster"
"mode,"
"several"
"features"
"become"
"available"
"to"
"developers,"
"leading"
"to"
"smoother"
"and"
"more"
"robust"
"productionization:"
"\n"
"Task"
"parallelization"
"using"
"dask"
"\n"
"Change"
"data"
"capture"
"using"
"MongoDB"
"change"
"streams."
"\n"
"A"
"client-server"
"implementation,"
"allowing"
"remote"
"access"
"to"
"a"
"SuperDuperDB"
"deployment."
"\n"
"Contents#"
"\n"
"Jobs#"
"\n"
"Scheduling"
"of"
"training"
"and"
"model"
"outputs#"
"\n"
"In"
"order"
"to"
"most"
"efficiently"
"marshall"
"computational"
"resources,"
"SuperDuperDB"
"may"
"be"
"configured"
"to"
"run"
"in"
"asynchronous"
"mode"
"{""distributed"":"
"True}."
"The"
"simplesst"
"way"
"to"
"set"
"a"
"distributed"
"SuperDuperDB"
"deployment"
"is"
"using"
"a"
"single-host"
"cluster."
"See"
"the"
"section"
"on"
"configuration"
"for"
"details"
"in"
"setting"
"up"
"SuperDuperDB."
"\n"
"There"
"are"
"several"
"key"
"functionalities"
"in"
"SuperDuperDB"
"which"
"trigger"
"asynchronous"
"jobs"
"to"
"be"
"spawned"
"in"
"the"
"configured"
"Dask"
"worker"
"pool."
"\n"
"Inserting"
"data"
"\n"
"Updating"
"data"
"\n"
"Creating"
"Listener"
"instances"
"\n"
"Apply"
"models"
"to"
"data"
"model.predict"
"\n"
"Training"
"models"
"model.fit"
"\n"
"See"
"the"
"Dask"
"documentation"
"for"
"more"
"information"
"about"
"setting"
"up"
"and"
"managing"
"Dask"
"deployments."
"The"
"dask"
"deployment"
"may"
"be"
"configured"
"using"
"the"
"configuration"
"stystem."
"\n"
"The"
"stdout"
"and"
"status"
"of"
"the"
"job"
"may"
"be"
"monitored"
"using"
"the"
"returned"
"Job"
"object:"
"\n"
"Jobs"
"may"
"be"
"viewed"
"using"
"db.show:"
"\n"
"SuperDuperDB"
"single"
"host"
"cluster"
"deployment#"
"\n"
"The"
"simplest"
"way"
"to"
"create"
"a"
"SuperDuperDB"
"deployment,"
"is"
"to"
"use"
"the"
"CLI"
"to"
"start"
"all"
"of"
"the"
"services"
"involved"
"in"
"one"
"command:"
"\n"
"This"
"command"
"starts"
"the"
"following"
"components:"
"\n"
"Server"
"(accessible"
"via"
"the"
"SuperDuperDB"
"client)"
"\n"
"Local"
"Dask"
"Cluster"
"(configurable"
"via"
"configuration"
"system)"
"for"
"deploying"
"jobs"
"\n"
"Change"
"data"
"capture"
"implementing"
"listeners"
"on"
"MongoDB"
"collections"
"mentioned"
"in"
"space"
"separated"
"list"
"collection_names"
"\n"
"See"
"our"
"architecture"
"diagram"
"here"
"for"
"a"
"more"
"detailed"
"explanation"
"of"
"how"
"these"
"components"
"interact."
"\n"
"Compare"
"vector"
"search#"
"\n"
"SuperDuperDB"
"provides"
"the"
"possibility"
"to"
"make"
"several"
"decisions"
"when"
"it"
"comes"
"to"
"AI"
"modelling"
"and,"
"in"
"particular,"
"vector-search:"
"\n"
"Whether"
"to"
"use"
"a"
"framework,"
"library"
"or"
"API"
"provider"
"\n"
"Whether"
"to"
"bring/"
"create"
"one’s"
"own"
"model,"
"or"
"to"
"integrate"
"a"
"pre-built"
"model"
"\n"
"Which"
"documents"
"should"
"be"
"served"
"by"
"a"
"particular"
"vector-search"
"solution"
"\n"
"In"
"this"
"notebook"
"we"
"compare"
"two"
"distinct"
"vector-search"
"solutions"
"within"
"SuperDuperDB:"
"\n"
"Vector-search"
"based"
"on"
"embeddings"
"from"
"OpenAI"
"\n"
"Vector-search"
"based"
"on"
"embeddings"
"from"
"Sentence"
"Transformers"
"\n"
"To"
"do"
"this,"
"one"
"needs"
"to"
"have"
"sentence-transformers"
"installed."
"(openai"
"comes"
"installed"
"with"
"pinnacledb)"
"\n"
"In"
"order"
"to"
"access"
"SuperDuperDB,"
"we"
"use"
"the"
"Datalayer"
"class."
"This"
"is"
"obtained"
"by"
"simply"
"wrapping"
"your"
"MongoDB"
"database"
"connection,"
"using"
"pymongo."
"We’ll"
"be"
"adding"
"data"
"and"
"activating"
"models"
"on"
"the"
"""wikipedia"""
"collection:"
"\n"
"In"
"order"
"to"
"access"
"SuperDuperDB,"
"we"
"use"
"the"
"Datalayer"
"class."
"This"
"is"
"obtained"
"by"
"simply"
"wrapping"
"your"
"MongoDB"
"database"
"connection,"
"using"
"pymongo."
"We’ll"
"be"
"adding"
"data"
"and"
"activating"
"models"
"on"
"the"
"wikipedia"
"collection:"
"\n"
"Creating"
"a"
"vector-index"
"in"
"SuperDuperDB"
"involves"
"two"
"things:"
"\n"
"Creating"
"a"
"model"
"which"
"is"
"used"
"to"
"compute"
"vectors"
"(in"
"this"
"case"
"OpenAIEmbedding)"
"\n"
"Daemonizing"
"this"
"model"
"on"
"a"
"key"
"(Listener),"
"so"
"that"
"when"
"new"
"data"
"are"
"added,"
"these"
"are"
"vectorized"
"using"
"the"
"key"
"\n"
"The"
"following"
"function"
"sets-up"
"and"
"validates"
"a"
"vector-search"
"solution"
"in"
"one"
"shot."
"We"
"can"
"use"
"this"
"function"
"to"
"compare"
"sentence_transformers"
"with"
"openai."
"\n"
"Sentence"
"Transformers"
"are"
"supported"
"by"
"SuperDuperDB,"
"with"
"a"
"wrapper"
"that"
"allows"
"the"
"chosen"
"model"
"to"
"communicate"
"directly"
"with"
"SuperDuperDB."
"The"
"encoder"
"argument"
"specifies"
"how"
"the"
"outputs"
"of"
"the"
"models"
"are"
"saved"
"in"
"the"
"Datalayer."
"\n"
"The"
"results"
"of"
"the"
"validation,"
"as"
"well"
"as"
"the"
"vector-index"
"and"
"associated"
"models"
"are"
"saved"
"in"
"the"
"Datalayer."
"We"
"can"
"reload"
"them"
"like"
"this:"
"\n"
"Let’s"
"repeat"
"this"
"process"
"with"
"OpenAI:"
"\n"
"Example"
"notebooks#"
"\n"
"Contents#"
"\n"
"MNIST"
"using"
"scikit-learn"
"and"
"SuperDuperDB#"
"\n"
"In"
"a"
"previous"
"example"
"we"
"discussed"
"how"
"to"
"implement"
"MNIST"
"classification"
"with"
"CNNs"
"in"
"torch"
"using"
"SuperDuperDB."
"\n"
"As"
"before"
"we’ll"
"import"
"the"
"python"
"MongoDB"
"client"
"pymongo"
"and"
"“wrap”"
"our"
"database"
"to"
"convert"
"it"
"to"
"a"
"SuperDuper"
"Datalayer:"
"\n"
"Similarly"
"to"
"last"
"time,"
"we"
"can"
"add"
"data"
"to"
"SuperDuperDB"
"in"
"a"
"way"
"which"
"very"
"similar"
"to"
"using"
"pymongo."
"This"
"time,"
"we’ll"
"add"
"the"
"data"
"as"
"numpy.array"
"to"
"SuperDuperDB,"
"using"
"the"
"Document-Encoder"
"formalism:"
"\n"
"Models"
"are"
"built"
"similarly"
"to"
"the"
"Datalayer,"
"by"
"wrapping"
"a"
"standard"
"Python-AI-ecosystem"
"model:"
"\n"
"Now"
"let’s"
"fit"
"the"
"model."
"The"
"optimization"
"uses"
"Scikit-Learn’s"
"inbuilt"
"training"
"procedures."
"Unlike"
"in"
"a"
"standard"
"sklearn"
"use-case,"
"we"
"don’t"
"need"
"to"
"fetch"
"the"
"data"
"client"
"side."
"Instead,"
"we"
"simply"
"name"
"the"
"fields"
"in"
"the"
"MongoDB"
"collection"
"which"
"we’d"
"like"
"to"
"use."
"\n"
"Installed"
"models"
"and"
"functionality"
"can"
"be"
"viewed"
"using"
"db.show:"
"\n"
"The"
"model"
"may"
"be"
"reloaded"
"in"
"another"
"session"
"from"
"the"
"database."
"As"
"with"
".fit,"
"the"
"model"
"may"
"be"
"applied"
"to"
"data"
"in"
"the"
"database"
"with"
".predict:"
"\n"
"We"
"can"
"verify"
"that"
"the"
"predictions"
"make"
"sense"
"by"
"fetching"
"a"
"few"
"random"
"data-points:"
"\n"
"Training"
"and"
"maintaining"
"MNIST"
"predictions#"
"\n"
"In"
"this"
"notebook"
"we’ll"
"be"
"implementing"
"a"
"classic"
"machine"
"learning"
"classification"
"task:"
"MNIST"
"hand"
"written"
"digit"
"recognition,"
"using"
"a"
"convolution"
"neural"
"network,"
"but"
"with"
"a"
"twist:"
"we’ll"
"be"
"implementing"
"the"
"task"
"in"
"database"
"using"
"SuperDuperDB."
"\n"
"SuperDuperDB"
"supports"
"MongoDB"
"as"
"a"
"databackend."
"Correspondingly,"
"we’ll"
"import"
"the"
"python"
"MongoDB"
"client"
"pymongo"
"and"
"“wrap”"
"our"
"database"
"to"
"convert"
"it"
"to"
"a"
"SuperDuper"
"Datalayer:"
"\n"
"Now"
"that"
"we’ve"
"connected"
"to"
"SuperDuperDB,"
"let’s"
"add"
"some"
"data."
"MNIST"
"is"
"a"
"good"
"show"
"case"
"for"
"one"
"of"
"the"
"key"
"benefits"
"of"
"SuperDuperDB"
"-"
"adding"
"“difficult”"
"data"
"types."
"This"
"can"
"be"
"done"
"using"
"an"
"Encoder"
"which"
"is"
"a"
"key"
"wrapper"
"in"
"SuperDuperDB’s"
"arsenal."
"The"
"Encoder"
"works"
"closely"
"together"
"with"
"the"
"Document"
"wrapper."
"Together"
"they"
"allow"
"Python"
"dictionaries"
"containing"
"non-JSONable/"
"bytes"
"objects,"
"to"
"be"
"insert"
"into"
"SuperDuperDB:"
"\n"
"Now"
"that"
"we’ve"
"inserted"
"the"
"images"
"and"
"their"
"classes"
"to"
"the"
"database,"
"let’s"
"query"
"some"
"data:"
"\n"
"When"
"we"
"query"
"the"
"data,"
"it’s"
"in"
"exactly"
"the"
"format"
"we"
"inserted"
"it."
"In"
"particular,"
"we"
"can"
"use"
"the"
"PIL.Image"
"instances"
"to"
"inspect"
"the"
"data:"
"\n"
"Now"
"let’s"
"create"
"our"
"model."
"SuperDuperDB"
"supports"
"these"
"frameworks,"
"out-of-the-box:"
"\n"
"torch"
"\n"
"sklearn"
"\n"
"transformers"
"\n"
"sentence_transformers"
"\n"
"openai"
"\n"
"langchain"
"\n"
"In"
"this"
"case,"
"we’re"
"going"
"to"
"use"
"PyTorch,"
"since"
"it’s"
"great"
"for"
"computer"
"vision"
"use-cases."
"We"
"can"
"combine"
"torch"
"with"
"torchvision"
"in"
"SuperDuperDB."
"\n"
"We’ve"
"created"
"postprocess"
"and"
"preprocess"
"functions"
"to"
"handle"
"the"
"communication"
"with"
"the"
"SuperDuperDB"
"Datalayer."
"In"
"order"
"to"
"create"
"a"
"native"
"SuperDuperDB"
"model,"
"we"
"wrap"
"the"
"model,"
"preprocessing"
"and"
"postprocessing:"
"\n"
"The"
"model"
"predicts"
"human"
"readable"
"outputs,"
"directly"
"from"
"the"
"PIL.Image"
"objects."
"All"
"models"
"in"
"SuperDuperDB"
"are"
"equipped"
"with"
"a"
"sklearn-style"
".predict"
"method."
"This"
"makes"
"it"
"easy"
"to"
"know"
"how"
"each"
"AI-framework"
"will"
"operate"
"in"
"combination"
"with"
"the"
"Datalayer."
"\n"
"Now"
"we’re"
"ready"
"to"
"“train”"
"or"
"“fit”"
"the"
"model."
"Trainable"
"models"
"in"
"SuperDuperDB"
"are"
"equipped"
"with"
"a"
"sklearn-like"
".fit"
"method:"
"\n"
"Now"
"that"
"the"
"model"
"has"
"been"
"trained,"
"we"
"can"
"use"
"it"
"to"
"“listen”"
"the"
"data"
"for"
"incoming"
"changes."
"This"
"is"
"set"
"up"
"with"
"a"
"simple"
"predict"
"“on”"
"the"
"database"
"(without"
"loading"
"all"
"the"
"data"
"client-side)."
"\n"
"The"
"listen"
"toggle"
"“activates”"
"the"
"model:"
"\n"
"We"
"can"
"see"
"that"
"predictions"
"are"
"available"
"in"
"_outputs.img.lenet5."
"The"
".unpack()"
"method"
"strips"
"the"
"document"
"down"
"to"
"just"
"the"
"data."
"\n"
"The"
"models"
"“activated”"
"can"
"be"
"seen"
"here:"
"\n"
"We"
"can"
"verify"
"that"
"the"
"model"
"is"
"activated,"
"by"
"inserting"
"the"
"rest"
"of"
"the"
"data:"
"\n"
"You"
"can"
"see"
"that"
"the"
"inserted"
"data,"
"are"
"now"
"also"
"populated"
"with"
"predictions:"
"\n"
"Multimodal"
"search"
"with"
"CLIP#"
"\n"
"In"
"this"
"notebook"
"we"
"show-case"
"SuperDuperDB’s"
"functionality"
"for"
"searching"
"with"
"multiple"
"types"
"of"
"data"
"over"
"the"
"same"
"VectorIndex."
"This"
"comes"
"out"
"very"
"naturally,"
"due"
"to"
"the"
"fact"
"that"
"SuperDuperDB"
"allows"
"users"
"and"
"developers"
"to"
"add"
"arbitrary"
"models"
"to"
"SuperDuperDB,"
"and"
"(assuming"
"they"
"output"
"vectors)"
"use"
"these"
"models"
"at"
"search/"
"inference"
"time,"
"to"
"vectorize"
"diverse"
"queries."
"\n"
"To"
"this"
"end,"
"we’ll"
"be"
"using"
"the"
"CLIP"
"multimodal"
"architecture."
"\n"
"So"
"let’s"
"start."
"\n"
"SuperDuperDB"
"supports"
"MongoDB"
"as"
"a"
"databackend."
"Correspondingly,"
"we’ll"
"import"
"the"
"python"
"MongoDB"
"client"
"pymongo"
"and"
"“wrap”"
"our"
"database"
"to"
"convert"
"it"
"to"
"a"
"SuperDuper"
"Datalayer:"
"\n"
"In"
"order"
"to"
"make"
"this"
"notebook"
"easy"
"to"
"execute"
"an"
"play"
"with,"
"we’ll"
"use"
"a"
"sub-sample"
"of"
"the"
"Tiny-Imagenet"
"dataset."
"\n"
"Everything"
"we"
"are"
"doing"
"here"
"generalizes"
"to"
"much"
"larger"
"datasets,"
"with"
"higher"
"resolution"
"images,"
"without"
"further"
"ado."
"For"
"such"
"use-cases,"
"however,"
"it’s"
"advisable"
"to"
"use"
"a"
"machine"
"with"
"a"
"GPU,"
"otherwise"
"they’ll"
"be"
"some"
"significant"
"thumb"
"twiddling"
"to"
"do."
"\n"
"To"
"get"
"the"
"images"
"into"
"the"
"database,"
"we"
"use"
"the"
"Encoder-Document"
"framework."
"This"
"allows"
"us"
"to"
"save"
"Python"
"class"
"instances"
"as"
"blobs"
"in"
"the"
"Datalayer,"
"but"
"retrieve"
"them"
"as"
"Python"
"objects."
"This"
"makes"
"it"
"far"
"easier"
"to"
"integrate"
"Python"
"AI-models"
"with"
"the"
"datalayer."
"\n"
"To"
"this"
"end,"
"SuperDuperDB"
"contains"
"pre-configured"
"support"
"for"
"PIL.Image"
"instances."
"It’s"
"also"
"possible"
"to"
"create"
"your"
"own"
"encoders."
"\n"
"The"
"wrapped"
"python"
"dictionaries"
"may"
"be"
"inserted"
"directly"
"to"
"the"
"Datalayer:"
"\n"
"We"
"can"
"verify"
"that"
"the"
"images"
"are"
"correctly"
"stored:"
"\n"
"We"
"now"
"can"
"wrap"
"the"
"CLIP"
"model,"
"to"
"ready"
"it"
"for"
"multimodel"
"search."
"It"
"involves"
"2"
"components:"
"\n"
"text-encoding"
"\n"
"visual-encoding"
"\n"
"Once"
"we"
"have"
"installed"
"both"
"parts,"
"we"
"will"
"be"
"able"
"to"
"search"
"with"
"both"
"images"
"and"
"text"
"for"
"matching"
"items:"
"\n"
"Let’s"
"verify"
"this"
"works:"
"\n"
"Similar"
"procedure"
"with"
"the"
"visual"
"part,"
"which"
"takes"
"PIL.Image"
"instances"
"as"
"inputs."
"\n"
"Now"
"let’s"
"create"
"the"
"index"
"for"
"searching"
"by"
"vector."
"We"
"register"
"both"
"models"
"with"
"the"
"index"
"simultaneously,"
"but"
"specifying"
"that"
"it’s"
"the"
"visual_model"
"which"
"will"
"be"
"responsible"
"for"
"creating"
"the"
"vectors"
"in"
"the"
"database"
"(indexing_listener)."
"The"
"compatible_listener"
"specifies"
"how"
"one"
"can"
"use"
"an"
"alternative"
"model"
"to"
"search"
"the"
"vectors."
"By"
"using"
"models"
"which"
"expect"
"different"
"types"
"of"
"index,"
"we"
"can"
"implement"
"multimodal"
"search"
"without"
"further"
"ado."
"\n"
"We"
"can"
"now"
"demonstrate"
"searching"
"by"
"text"
"for"
"images:"
"\n"
"OpenAI"
"vector"
"search#"
"\n"
"In"
"this"
"tutorial"
"we’ll"
"implement"
"vector-search"
"in"
"SuperDuperDB"
"using"
"OpenAI"
"vector-embeddings."
"For"
"this"
"you’ll"
"need"
"an"
"OPENAI_API_KEY,"
"which"
"you"
"can"
"obtain"
"on"
"openai’s"
"website."
"You’ll"
"then"
"set"
"this"
"as"
"an"
"environment"
"variable:"
"\n"
"In"
"order"
"to"
"access"
"SuperDuperDB,"
"we"
"use"
"the"
"Datalayer"
"class."
"This"
"is"
"obtained"
"by"
"simply"
"wrapping"
"your"
"MongoDB"
"database"
"connection,"
"using"
"pymongo."
"We’ll"
"be"
"adding"
"data"
"and"
"activating"
"models"
"on"
"the"
"wikipedia"
"collection:"
"\n"
"We’ll"
"use"
"a"
"tiny"
"excerpt"
"out"
"of"
"wikipedia"
"to"
"test"
"the"
"functionality."
"Needless"
"to"
"say,"
"since"
"the"
"Datalayer"
"uses"
"MongoDB"
"and"
"LanceDB,"
"the"
"vector-search"
"solution"
"may"
"be"
"taken"
"to"
"large"
"scale"
"without"
"a"
"problem:"
"\n"
"Creating"
"a"
"vector-index"
"in"
"SuperDuperDB"
"involves"
"two"
"things:"
"\n"
"Creating"
"a"
"model"
"which"
"is"
"used"
"to"
"compute"
"vectors"
"(in"
"this"
"case"
"OpenAIEmbedding)"
"\n"
"Daemonizing"
"this"
"model"
"on"
"a"
"key"
"(Listener),"
"so"
"that"
"when"
"new"
"data"
"are"
"added,"
"these"
"are"
"vectorized"
"using"
"the"
"key"
"\n"
"This"
"may"
"be"
"done"
"in"
"multiple"
"steps"
"in"
"or"
"one"
"command,"
"as"
"below:"
"\n"
"We"
"can"
"verify"
"the"
"components"
"which"
"have"
"been"
"activated"
"in"
"the"
"database"
"with"
"db.show:"
"\n"
"You’ll"
"see"
"now,"
"that"
"as"
"data"
"are"
"added"
"to"
"the"
"database,"
"the"
"model"
"springs"
"into"
"action,"
"vectorizing"
"these"
"documents,"
"and"
"adding"
"the"
"vectors"
"back"
"to"
"the"
"original"
"documents:"
"\n"
"We"
"can"
"verify"
"that"
"the"
"vectors"
"are"
"in"
"the"
"documents:"
"\n"
"Now"
"we"
"can"
"use"
"the"
"vector-index"
"to"
"search"
"via"
"meaning"
"through"
"the"
"wikipedia"
"abstracts:"
"\n"
"The"
"upside"
"of"
"using"
"a"
"standard"
"database"
"as"
"the"
"databackend,"
"is"
"that"
"we"
"can"
"combine"
"vector-search"
"with"
"standard"
"filtering,"
"to"
"get"
"a"
"hybrid"
"search:"
"\n"
"Creating"
"a"
"DB"
"of"
"image"
"features"
"in"
"torchvision#"
"\n"
"In"
"this"
"use-case,"
"we"
"demonstrate"
"how"
"to"
"use"
"a"
"pre-trained"
"network"
"from"
"torchvision"
"to"
"generate"
"image"
"features"
"for"
"images"
"which"
"are"
"automatically"
"downloaded"
"into"
"MongoDB."
"We"
"use"
"a"
"sample"
"of"
"the"
"CoCo"
"dataset"
"(https://cocodataset.org/#home)"
"to"
"demonstrate"
"the"
"functionality."
"\n"
"As"
"usual,"
"we"
"instantiate"
"the"
"Datalayer"
"like"
"this"
"\n"
"We"
"then"
"add"
"all"
"of"
"the"
"image"
"URIs"
"to"
"MongoDB."
"The"
"URIs"
"can"
"be"
"a"
"mixture"
"of"
"local"
"file"
"paths"
"(file://...),"
"web"
"URLs"
"(http...)"
"and"
"s3"
"URIs"
"(s3://...)."
"After"
"adding"
"the"
"URIs,"
"SuperDuperDB"
"loads"
"their"
"content"
"into"
"MongoDB"
"-"
"no"
"additional"
"overhead"
"or"
"job"
"definition"
"required."
"\n"
"We"
"can"
"verify"
"that"
"the"
"images"
"were"
"correctly"
"stored"
"in"
"the"
"Datalayer:"
"\n"
"Now"
"let’s"
"create"
"the"
"torch+torchvision"
"model"
"using"
"the"
"TorchModel"
"wrapper"
"from"
"SuperDuperDB."
"It’s"
"possible"
"to"
"create"
"arbitrary"
"pre-"
"and"
"post-processing"
"along"
"with"
"the"
"model"
"forward"
"pass:"
"\n"
"Let’s"
"verify"
"model"
"by"
"testing"
"on"
"a"
"single"
"data-point"
"one=True:"
"\n"
"Now"
"that"
"we’ve"
"got"
"the"
"model"
"ready,"
"we"
"can"
"apply"
"it"
"to"
"the"
"images"
"in"
"the"
"Datalayer:"
"\n"
"Let’s"
"verify"
"that"
"the"
"features"
"were"
"stored"
"in"
"the"
"Datalayer."
"You"
"can"
"see"
"them"
"in"
"the"
"_outputs.img.resnet50"
"field:"
"\n"
"Sentiment"
"analysis"
"with"
"transformers#"
"\n"
"In"
"this"
"notebook"
"we"
"implement"
"a"
"classic"
"NLP"
"use-case"
"using"
"Hugging"
"Face’s"
"transformers"
"library."
"We"
"show"
"that"
"this"
"use-case"
"may"
"be"
"implementing"
"directly"
"in"
"the"
"SuperDuperDB"
"Datalayer"
"using"
"MongoDB"
"as"
"the"
"data-backend."
"\n"
"SuperDuperDB"
"supports"
"MongoDB"
"as"
"a"
"databackend."
"Correspondingly,"
"we’ll"
"import"
"the"
"python"
"MongoDB"
"client"
"pymongo"
"and"
"“wrap”"
"our"
"database"
"to"
"convert"
"it"
"to"
"a"
"SuperDuper"
"Datalayer:"
"\n"
"We"
"use"
"the"
"IMDB"
"dataset"
"for"
"training"
"the"
"model:"
"\n"
"Check"
"a"
"sample"
"from"
"the"
"database:"
"\n"
"Create"
"a"
"tokenizer"
"and"
"use"
"it"
"to"
"provide"
"a"
"data-collator"
"for"
"batching"
"inputs:"
"\n"
"We’ll"
"evaluate"
"the"
"model"
"using"
"a"
"simple"
"accuracy"
"metric."
"This"
"metric"
"gets"
"logged"
"in"
"the"
"model’s"
"metadata"
"during"
"training:"
"\n"
"Now"
"we’re"
"ready"
"to"
"train"
"the"
"model:"
"\n"
"We"
"can"
"verify"
"that"
"the"
"model"
"gives"
"us"
"reasonable"
"predictions:"
"\n"
"Transfer"
"learning"
"using"
"Sentence"
"Transformers"
"and"
"Scikit-Learn#"
"\n"
"In"
"this"
"example,"
"we’ll"
"be"
"demonstrating"
"how"
"to"
"simply"
"implement"
"transfer"
"learning"
"using"
"SuperDuperDB."
"You’ll"
"find"
"related"
"examples"
"on"
"vector-search"
"and"
"simple"
"training"
"examples"
"using"
"scikit-learn"
"in"
"the"
"the"
"notebooks"
"directory"
"of"
"the"
"project."
"Transfer"
"learning"
"leverages"
"similar"
"components,"
"and"
"may"
"be"
"used"
"synergistically"
"with"
"vector-search."
"Vectors"
"are,"
"after"
"all,"
"simultaneously"
"featurizations"
"of"
"data"
"and"
"may"
"be"
"used"
"in"
"downstream"
"learning"
"tasks."
"\n"
"Let’s"
"first"
"connect"
"to"
"MongoDB"
"via"
"SuperDuperDB,"
"you"
"read"
"explanations"
"of"
"how"
"to"
"do"
"this"
"in"
"the"
"docs,"
"and"
"in"
"the"
"notebooks/"
"directory."
"\n"
"We’ll"
"use"
"textual"
"data"
"labelled"
"with"
"sentiment,"
"to"
"test"
"the"
"functionality."
"Transfer"
"learning"
"can"
"be"
"used"
"on"
"any"
"data"
"which"
"can"
"be"
"processed"
"with"
"SuperDuperDB"
"models."
"\n"
"Let’s"
"create"
"a"
"SuperDuperDB"
"model"
"based"
"on"
"a"
"sentence_transformers"
"model."
"You’ll"
"notice"
"that"
"we"
"don’t"
"necessarily"
"need"
"a"
"native"
"SuperDuperDB"
"integration"
"to"
"a"
"model"
"library"
"in"
"order"
"to"
"leverage"
"its"
"power"
"with"
"SuperDuperDB."
"For"
"example,"
"in"
"this"
"case,"
"we"
"just"
"need"
"to"
"configure"
"the"
"Model"
"wrapper"
"to"
"interoperate"
"correctly"
"with"
"the"
"SentenceTransformer"
"class."
"After"
"doing"
"this,"
"we"
"can"
"link"
"the"
"model"
"to"
"a"
"collection,"
"and"
"daemonize"
"the"
"model"
"using"
"the"
"listen=True"
"keyword:"
"\n"
"Now"
"that"
"we’ve"
"created"
"and"
"added"
"the"
"model"
"which"
"computes"
"features"
"for"
"the"
"""text"","
"we"
"can"
"train"
"a"
"downstream"
"model"
"using"
"Scikit-Learn:"
"\n"
"Now"
"that"
"the"
"model"
"has"
"been"
"trained,"
"we"
"can"
"apply"
"the"
"model"
"to"
"the"
"database,"
"also"
"daemonizing"
"the"
"model"
"with"
"listen=True."
"\n"
"To"
"verify"
"that"
"this"
"process"
"has"
"worked,"
"we"
"can"
"sample"
"a"
"few"
"records,"
"to"
"inspect"
"the"
"sanity"
"of"
"the"
"predictions"
"\n"
"Cataloguing"
"voice-memos"
"for"
"a"
"self"
"managed"
"personal"
"assistant#"
"\n"
"In"
"this"
"example"
"we"
"show-case"
"SuperDuperDB’s"
"ability"
"to"
"combine"
"models"
"across"
"data"
"modalities,"
"in"
"this"
"case"
"audio"
"and"
"text,"
"to"
"devise"
"highly"
"sophisticated"
"data"
"based"
"apps,"
"with"
"very"
"little"
"boilerplate"
"code."
"\n"
"The"
"aim,"
"is"
"to:"
"\n"
"Maintain"
"a"
"database"
"of"
"audio"
"recordings"
"\n"
"Index"
"the"
"content"
"of"
"these"
"audio"
"recordings"
"\n"
"Search"
"and"
"interrogate"
"the"
"content"
"of"
"these"
"audio"
"recordings"
"\n"
"We"
"accomplish"
"this"
"by:"
"\n"
"Use"
"a"
"transformers"
"model"
"by"
"Facebook’s"
"AI"
"team"
"to"
"transcribe"
"the"
"audio"
"to"
"text"
"\n"
"Use"
"an"
"OpenAI"
"vectorization"
"model"
"to"
"index"
"the"
"transcribed"
"text"
"\n"
"Use"
"OpenAI’s"
"ChatGPT"
"model"
"in"
"combination"
"with"
"relevant"
"recordings"
"to"
"interrogate"
"the"
"contents"
"of"
"the"
"audio"
"database"
"\n"
"This"
"functionality"
"could"
"be"
"accomplised"
"using"
"any"
"audio,"
"in"
"particular"
"audio"
"hosted"
"on"
"the"
"web,"
"or"
"in"
"an"
"s3"
"bucket."
"For"
"instance,"
"if"
"you"
"have"
"a"
"repository"
"of"
"audio"
"of"
"conference"
"calls,"
"or"
"memos,"
"this"
"may"
"be"
"indexed"
"in"
"the"
"same"
"way."
"\n"
"To"
"make"
"matters"
"simpler,"
"we"
"use"
"a"
"dataset"
"of"
"audio"
"recordings"
"from"
"the"
"datasets"
"library,"
"to"
"demonstrate"
"the"
"functionality:"
"\n"
"As"
"usual"
"we"
"wrap"
"our"
"MongoDB"
"connector,"
"to"
"connect"
"to"
"the"
"Datalayer:"
"\n"
"Using"
"an"
"Encoder,"
"we"
"may"
"add"
"the"
"audio"
"data"
"directly"
"to"
"a"
"MongoDB"
"collection:"
"\n"
"Now"
"that"
"we’ve"
"done"
"that,"
"let’s"
"apply"
"a"
"pretrained"
"transformers"
"model"
"to"
"this"
"data:"
"\n"
"We"
"wrap"
"this"
"model"
"using"
"the"
"SuperDuperDB"
"wrapper"
"for"
"transformers:"
"\n"
"Let’s"
"verify"
"this"
"Pipeline"
"works"
"on"
"a"
"sample"
"datapoint"
"\n"
"Now"
"let’s"
"apply"
"the"
"Pipeline"
"to"
"all"
"of"
"the"
"audio"
"recordings:"
"\n"
"We"
"may"
"now"
"verify"
"that"
"all"
"of"
"the"
"recordings"
"have"
"been"
"transcribed"
"in"
"the"
"database"
"\n"
"As"
"in"
"previous"
"examples,"
"we"
"can"
"use"
"OpenAI’s"
"text-embedding"
"models"
"to"
"vectorize"
"and"
"search"
"the"
"textual"
"transcriptions"
"directly"
"in"
"MongoDB:"
"\n"
"Let’s"
"confirm"
"this"
"has"
"worked,"
"by"
"searching"
"for"
"the"
"“royal"
"cavern”"
"\n"
"Now"
"we"
"can"
"connect"
"the"
"previous"
"steps"
"with"
"the"
"gpt-3.5.turbo,"
"which"
"is"
"a"
"chat-completion"
"model"
"on"
"OpenAI."
"The"
"plan"
"is"
"to"
"seed"
"the"
"completions"
"with"
"the"
"most"
"relevant"
"audio"
"recordings,"
"as"
"judged"
"by"
"their"
"textual"
"transcriptions."
"These"
"transcriptions"
"are"
"retrieved"
"using"
"the"
"previously"
"configured"
"VectorIndex:"
"\n"
"Let’s"
"test"
"the"
"full"
"model!"
"We"
"can"
"ask"
"a"
"question"
"which"
"asks"
"about"
"a"
"specific"
"fact"
"mentioned"
"somewhere"
"in"
"the"
"audio"
"recordings."
"The"
"model"
"will"
"retrieve"
"the"
"most"
"relevant"
"recordings,"
"and"
"use"
"these"
"in"
"formulating"
"its"
"answer:"
"\n"
"When"
"to"
"use"
"standalone"
"or"
"cluster"
"mode#"
"\n"
"SuperDuperDB"
"may"
"be"
"used"
"in"
"cluster"
"or"
"standalone"
"mode,"
"depending"
"on"
"the"
"use-case,"
"and"
"whether"
"SuperDuperDB"
"is"
"being"
"used"
"for"
"development"
"of"
"production."
"By"
"default"
"SuperDuperDB"
"runs"
"in"
"standalone"
"mode."
"Cluster"
"and"
"standalone"
"mode"
"affect"
"how"
"and"
"where"
"computations"
"are"
"run,"
"which"
"are"
"triggered"
"whenever:"
"\n"
"Data"
"is"
"inserted"
"or"
"updated,"
"triggering"
"data"
"to"
"be"
"downloaded"
"and"
"model.predict"
"to"
"be"
"executed"
"on"
"added"
"Listener"
"instances."
"\n"
"model.fit"
"is"
"called"
"\n"
"By"
"using"
"a"
"combination"
"of"
"standalone"
"mode"
"and"
"cluster"
"mode,"
"users"
"and"
"teams"
"may"
"profit"
"from"
"the"
"advantages"
"of"
"both"
"aspects,"
"especially"
"when"
"transitioning"
"from"
"development"
"to"
"deployment."
"\n"
"Standalone#"
"\n"
"In"
"standalone"
"mode,"
"all"
"computations"
"and"
"queries"
"run"
"in"
"a"
"single"
"thread."
"\n"
"Advantages"
"\n"
"Computations"
"are"
"run"
"transparently"
"in"
"the"
"foreground"
"\n"
"Debugging"
"is"
"straightforward"
"\n"
"Works"
"well"
"in"
"local"
"deployments"
"on"
"a"
"single"
"client"
"\n"
"Disadvantages"
"\n"
"Solution"
"does"
"not"
"scale"
"to"
"arbitrary"
"numbers"
"of"
"workers"
"\n"
"No"
"solution"
"for"
"communication"
"with"
"remote"
"hosts/"
"apps"
"\n"
"No"
"insertion"
"of"
"data"
"except"
"through"
"SuperDuperDB"
"main"
"thread"
"\n"
"Cluster#"
"\n"
"In"
"cluster"
"mode,"
"all"
"computations"
"run"
"asynchronously"
"on"
"a"
"Dask"
"cluster."
"In"
"addition,"
"a"
"change-data"
"capture"
"service"
"(CDC)"
"is"
"run"
"on"
"a"
"separate"
"thread,"
"which"
"listens"
"to"
"MongoDB"
"for"
"changes."
"Read"
"more"
"here."
"\n"
"Advantages"
"\n"
"Compute"
"is"
"scalable"
"to"
"magnitude"
"handled"
"by"
"Dask"
"cluster"
"\n"
"Deployment"
"is"
"accessible"
"remotely"
"via"
"client-server"
"implementation"
"\n"
"Disadvantages"
"\n"
"Debugging"
"is"
"challenging,"
"since"
"breakpoints"
"cannot"
"be"
"set"
"easily"
"in"
"workers"
"\n"
"Managing"
"solution"
"requires"
"setting"
"up"
"logging"
"service"
"to"
"monitor"
"all"
"components"
"\n"
"How"
"SuperDuperDB"
"handles"
"external"
"data#"
"\n"
"SuperDuperDB"
"has"
"2"
"handy"
"features"
"which"
"work"
"in"
"concert,"
"which"
"make"
"working"
"with"
"data"
"and"
"AI"
"together"
"much"
"more"
"convenient:"
"\n"
"Store"
"Python"
"objects"
"which"
"aren’t"
"serializable"
"in"
"standard"
"data"
"handled"
"by"
"JSON."
"\n"
"Add"
"data"
"by"
"reference"
"to"
"web-content,"
"aws"
"s3"
"URIs"
"and"
"local"
"filesystems"
"\n"
"The"
"key"
"abstraction"
"for"
"doing"
"this"
"is"
"pinnacledb.core.encoder.Encoder:"
"\n"
"An"
"Encoder"
"instance"
"attaches"
"an"
"encoder"
"and"
"decoder"
"to"
"the"
"data"
"to"
"be"
"sent"
"to"
"the"
"database."
"These"
"are"
"wrapped"
"in"
"an"
"Encodable"
"instance:"
"\n"
"The"
"Encodable"
"instance"
"then"
"has"
"the"
"information"
"it"
"needs"
"to"
"send"
"the"
"data"
"to"
"the"
"database:"
"\n"
"This"
"dictionary"
"is"
"now"
"in"
"a"
"form"
"compatible"
"with"
"storage"
"in"
"MongoDB"
"or"
"similar"
"document"
"stores."
"The"
"original"
"Encoder"
"is"
"able"
"to"
"decode"
"the"
"data"
"in"
"the"
"opposite"
"direction:"
"\n"
"SuperDuperDB"
"uses"
"the"
"""_content.encoder"""
"subfield"
"to"
"determine"
"which"
"Encoder"
"instance"
"it"
"should"
"use."
"Encoder"
"instances"
"are"
"loaded"
"from"
"SuperDuperDB"
"using"
"the"
"inbuilt"
"serialization"
"mechanism."
"\n"
"The"
"Encoder"
"may"
"also"
"be"
"used"
"to"
"add"
"content"
"via"
"a"
"reference"
"given"
"in"
"the"
"uri"
"parameter."
"For"
"example:"
"\n"
"This"
"is"
"also"
"a"
"document"
"which"
"can"
"be"
"handled"
"by"
"the"
"database."
"SuperDuperDB"
"then"
"creates"
"a"
"job"
"which"
"pulls"
"in"
"content"
"mentioned"
"in"
"the"
"uri"
"subfield."
"\n"
"Explanations#"
"\n"
"Read"
"the"
"following"
"pages,"
"if"
"you’re"
"interested"
"in"
"understanding"
"more"
"about"
"how"
"SuperDuperDB"
"works."
"\n"
"Contents#"
"\n"
"Serialization#"
"\n"
"SuperDuperDB"
"makes"
"extensive"
"use"
"of"
"various"
"serialization"
"techniques"
"in"
"Python,"
"in"
"order"
"to"
"save"
"the"
"following"
"objects"
"to"
"the"
"DB,"
"which"
"inherit"
"from"
"pinnacledb.container.base.Component"
"\n"
"Models"
"\n"
"Vector"
"Indexes"
"\n"
"Encoders"
"\n"
"Since"
"these"
"are"
"compound"
"objects"
"consisting"
"of"
"multiple"
"component"
"parts,"
"we"
"utilize"
"a"
"hybrid"
"serialization"
"scheme,"
"in"
"order"
"to"
"save"
"these"
"objects."
"The"
"scheme"
"is"
"based"
"on:"
"\n"
"Classes"
"wrapped"
"with"
"@dataclasses.dataclass"
"\n"
"Items"
"in"
"object.dict()"
"which"
"are"
"not"
"serializable"
"as"
"JSON,"
"serialized"
"using:"
"\n"
"dill"
"\n"
"pickle"
"\n"
"torch.save"
"\n"
"Important"
"items"
"which"
"can’t"
"be"
"saved"
"using"
"JSON,"
"are"
"signified"
"inside"
"the"
"object"
"with"
"the"
"wrapper"
"pinnacledb.core.artifact.Artifact."
"This"
"wrapper"
"carries"
"around"
"the"
"serialization"
"method"
"necessary"
"to"
"save"
"it’s"
"wrapped"
"object"
"in"
"the"
"artifact"
"store."
"\n"
"At"
"save"
"time"
"the"
"following"
"algorithm"
"is"
"executed:"
"\n"
"The"
"user"
"passes"
"my_object"
"a"
"descendant"
"of"
"Component"
"to"
"be"
"saved"
"in"
"db.add"
"\n"
"SuperDuperDB"
"executes"
"d"
"="
"my_object.to_dict()."
"\n"
"SuperDuperDB"
"extracts"
"the"
"Artifact"
"instances"
"out"
"of"
"d"
"and"
"saves"
"these"
"in"
"the"
"artifact"
"store."
"\n"
"SuperDuperDB"
"saves"
"the"
"d"
"which"
"includes"
"references"
"to"
"the"
"Artifact"
"instances"
"to"
"the"
"metadata"
"store."
"\n"
"Component"
"versioning#"
"\n"
"SuperDuperDB"
"has"
"a"
"component"
"versioning"
"system."
"This"
"versioning"
"system"
"applies"
"to"
"subclasses"
"of"
"Component:"
"\n"
"models"
"\n"
"encoders"
"\n"
"listeners"
"\n"
"vector-indexes"
"\n"
"Here’s"
"how"
"it"
"works:"
"\n"
"When"
"users"
"create"
"a"
"component,"
"they"
"are"
"required"
"to"
"choose"
"an"
"identifier."
"The"
"identifier"
"must"
"be"
"unique"
"for"
"each"
"of"
"the"
"distinct"
"classes"
"above."
"\n"
"After"
"the"
"identifier"
"has"
"been"
"chosen,"
"SuperDuperDB"
"creates"
"a"
"version"
"starting"
"at"
"0,"
"and"
"incremented"
"each"
"time"
"an"
"item"
"with"
"identifier"
"is"
"recreated."
"\n"
"For"
"example"
"the"
"following"
"would"
"create"
"two"
"versions"
"of"
"a"
"Model,"
"identified"
"by"
"""test-model"":"
"\n"
"When"
"creating"
"a"
"Component,"
"other"
"Component"
"contained"
"in"
"the"
"first"
"are"
"created"
"inline."
"\n"
"When"
"removing"
"a"
"Component"
"the"
"versioning"
"system"
"is"
"interrogated"
"and"
"if"
"they"
"play"
"a"
"role"
"in"
"other"
"Component"
"instances,"
"they"
"may"
"not"
"be"
"deleted."
"If"
"deletion"
"is"
"forced,"
"they"
"are"
"marked"
"as"
"hidden,"
"rather"
"than"
"deleted."
"\n"
"For"
"example"
"the"
"following"
"raises"
"an"
"Exception:"
"\n"
"Index"
"\n"
"_"
"\n"
"A"
"\n"
"B"
"\n"
"C"
"\n"
"D"
"\n"
"E"
"\n"
"F"
"\n"
"G"
"\n"
"H"
"\n"
"I"
"\n"
"J"
"\n"
"K"
"\n"
"L"
"\n"
"M"
"\n"
"N"
"\n"
"O"
"\n"
"P"
"\n"
"Q"
"\n"
"R"
"\n"
"S"
"\n"
"T"
"\n"
"U"
"\n"
"V"
"\n"
"W"
"\n"
"X"
"\n"
"Y"
"\n"
"Frequently"
"asked"
"questions#"
"\n"
"Is"
"SuperDuperDB"
"a"
"database?"
"\n"
"No,"
"SuperDuperDB"
"is"
"an"
"environment"
"to"
"run"
"alongside"
"your"
"database,"
"which"
"makes"
"it"
"🚀"
"SUPER-DUPER"
"🚀,"
"by"
"adding"
"comprehensive"
"AI"
"functionality."
"This"
"is"
"embodied"
"by"
"our"
"pinnacle"
"decorator:"
"\n"
"Do"
"you"
"provide"
"integrations"
"with"
"other"
"data-bases,"
"-lakes"
"or"
"-warehouses?"
"\n"
"Not"
"currently."
"We"
"are"
"currently"
"discussing"
"how"
"to"
"proceed"
"here,"
"in"
"open"
"source."
"We"
"believe"
"that"
"there"
"is"
"sufficient"
"developer"
"pain"
"and"
"a"
"large"
"enough"
"community"
"around"
"MongoDB"
"to"
"start"
"there."
"Please"
"review"
"our"
"issue"
"boards"
"on"
"GitHub"
"for"
"more"
"information."
"\n"
"Why"
"MongoDB"
"and"
"not"
"another"
"data"
"store"
"as"
"you"
"first"
"data"
"integration?"
"\n"
"The"
"genesis"
"of"
"SuperDuperDB"
"took"
"place"
"in"
"a"
"context"
"where"
"we"
"were"
"serving"
"unstructured"
"documents"
"at"
"inference"
"time."
"Working"
"backwards"
"from"
"there,"
"we"
"wanted"
"our"
"development"
"process"
"to"
"reflect"
"that"
"production"
"environment."
"We"
"started"
"with"
"large"
"dumps"
"of"
"JSON"
"documents,"
"but"
"quickly"
"hit"
"a"
"brick-wall;"
"we"
"deferred"
"to"
"hosting"
"our"
"own"
"MongoDB"
"community"
"edition"
"deployments"
"for"
"model"
"development,"
"allowing"
"us"
"to"
"transition"
"smoothly"
"to"
"production."
"\n"
"This"
"symmetry"
"between"
"production"
"and"
"development,"
"provides"
"the"
"possibility"
"for"
"significantly"
"reduced"
"overhead"
"in"
"building"
"AI"
"models"
"and"
"applications."
"SuperDuperDB"
"is"
"the"
"way"
"to"
"employ"
"such"
"a"
"symmetry"
"with"
"unstructured"
"documents"
"in"
"MongoDB."
"\n"
"Is"
"SuperDuperDB"
"an"
"MLOps"
"framework?"
"\n"
"We"
"understand"
"MLOps"
"to"
"mean"
"DevOps"
"for"
"machine"
"learning"
"(ML)"
"and"
"AI."
"That"
"means"
"focus"
"on"
"delivering"
"ML"
"and"
"AI"
"in"
"conjunction"
"with"
"continuous"
"integration"
"and"
"deployment"
"(CI"
"/"
"CD),"
"deployments"
"defined"
"by"
"infrastructure"
"as"
"code."
"\n"
"While"
"SuperDuperDB"
"can"
"be"
"used"
"to"
"great"
"effect"
"to"
"reduce"
"the"
"complexity"
"of"
"MLOps,"
"our"
"starting"
"point"
"is"
"a"
"far"
"simpler"
"problem"
"setting:"
"\n"
"Important"
"\n"
"Given"
"I"
"have"
"AI"
"models"
"built"
"as"
"Python"
"objects,"
"how"
"do"
"I"
"apply"
"these"
"to"
"my"
"data"
"deployment"
"with"
"zero"
"overhead"
"and"
"no"
"detours"
"through"
"traditional"
"DevOps"
"pipelines?"
"\n"
"From"
"this"
"point"
"of"
"view,"
"SuperDuperDB"
"is"
"an"
"effort"
"to"
"avoid"
"MLOps"
"per"
"se."
"That"
"results"
"in"
"MLOps"
"becoming"
"significantly"
"simpler,"
"the"
"moment"
"it"
"becomes"
"absolutely"
"necessary."
"\n"
"How"
"do"
"I"
"deploy"
"SuperDuperDB"
"alongside"
"the"
"FARM"
"stack?"
"\n"
"The"
"FARM"
"stack"
"refers"
"to"
"application"
"development"
"using"
"FastAPI,"
"React"
"and"
"MongoDB."
"In"
"this"
"triumvirate,"
"MongoDB"
"constitutes"
"the"
"database,"
"the"
"backend"
"is"
"deployed"
"in"
"Python"
"via"
"FastAPI,"
"and"
"the"
"frontend"
"is"
"built"
"in"
"React-Javascript."
"Due"
"to"
"the"
"Python"
"backend"
"and"
"the"
"developments"
"in"
"AI"
"in"
"Python"
"in"
"2023,"
"SuperDuperDB"
"is"
"an"
"ideal"
"candidate"
"to"
"integrate"
"here:"
"AI"
"models"
"are"
"managed"
"by"
"SuperDuperDB,"
"and"
"predictions"
"are"
"stored"
"in"
"MongoDB."
"\n"
"We"
"are"
"working"
"on"
"a"
"RESTful"
"client-server"
"implementation,"
"allowing"
"queries"
"involving"
"vector-search"
"models"
"to"
"be"
"dispatched"
"directly"
"from"
"a"
"React"
"frontend."
"For"
"applications"
"which"
"do"
"not"
"require"
"models"
"at"
"query-time,"
"model"
"outputs"
"may"
"be"
"consumed"
"directly"
"via"
"MongoDB,"
"if"
"change-data-capture"
"(CDC)"
"is"
"activated."
"\n"
"Why"
"haven’t"
"you"
"integrated"
"LangChain"
"with"
"SuperDuperDB?"
"\n"
"LangChain"
"is"
"a"
"Python"
"package"
"for"
"making:"
"\n"
"Data"
"aware"
"applications"
"\n"
"Allowing"
"language"
"models"
"to"
"interact"
"with"
"your"
"computer"
"system"
"\n"
"See"
"more"
"here."
"\n"
"SuperDuperDB"
"is"
"focused"
"around"
"the"
"database,"
"and"
"creating"
"ML"
"and"
"AI"
"models"
"which"
"operate"
"at"
"the"
"document/"
"row-level."
"This"
"includes"
"the"
"possibility"
"of"
"seeding"
"language"
"models"
"with"
"context"
"which"
"originates"
"from"
"vector"
"search."
"\n"
"We"
"found"
"we"
"did"
"not"
"need"
"LangChain"
"to"
"seed"
"OpenAI"
"or"
"other"
"language"
"models"
"with"
"prompts"
"constructed"
"out"
"of"
"records"
"from"
"the"
"DB"
"allows"
"us"
"to"
"do"
"everything"
"we"
"want"
"to"
"do"
"with"
"SuperDuperDB;"
"see"
"here"
"for"
"an"
"example"
"of"
"using"
"vector-search"
"to"
"seed"
"an"
"OpenAI"
"prompt."
"This"
"includes"
"building"
"highly"
"sophisticated"
"multimodal"
"workflows,"
"including"
"interactions"
"between"
"image,"
"text,"
"audio"
"and"
"more."
"For"
"this"
"reason,"
"we"
"decided"
"initially"
"not"
"to"
"integrate"
"LangChain."
"\n"
"Supported"
"Features#"
"\n"
"This"
"is"
"a"
"feature"
"list"
"of"
"features"
"supported"
"in"
"v0.1."
"\n"
"See"
"here"
"for"
"the"
"high-level"
"roadmap"
"going"
"forward."
"\n"
"Components#"
"\n"
"DB"
"\n"
"Models"
"\n"
"Encoders"
"\n"
"listeners"
"\n"
"Metrics"
"\n"
"Vector-Indexes"
"\n"
"Datasets"
"\n"
"AI"
"Models#"
"\n"
"API"
"structure#"
"\n"
"All"
"model"
"frameworks"
"are"
"equipped"
"with:"
"\n"
"model.predict(X,"
"db=<db>,"
"select=<query>)"
"\n"
"Optional"
"support"
"for:"
"\n"
"model.fit(X,"
"y=None,"
"db=<db>,"
"select=<query>)"
"\n"
"In-database"
"compute#"
"\n"
"For"
"model.fit"
"and"
"model.predict:"
"\n"
"All"
"model"
"frameworks"
"may"
"applied"
"client-side,"
"automatically"
"fetching"
"data"
"from"
"the"
"data"
"layer,"
"and"
"iterating"
"through"
"this"
"data,"
"reinserting"
"predictions"
"into"
"the"
"database"
"\n"
"The"
"same"
"workflow"
"may"
"be"
"flagged"
"to"
"happen"
"“in”"
"the"
"SuperDuperDB"
"environment."
"\n"
"Workflows"
"may"
"be"
"configured"
"to"
"run"
"in"
"parallel"
"on"
"Dask"
"workers"
"\n"
"Natively"
"supported"
"AI"
"frameworks#"
"\n"
"PyTorch"
"\n"
"Sklearn"
"\n"
"Transformers"
"\n"
"OpenAI"
"\n"
"Versioning"
"and"
"storage#"
"\n"
"Models,"
"and"
"components"
"associated"
"with"
"models"
"are"
"automatically"
"stored"
"in"
"a"
"configured"
"artifact"
"store,"
"and"
"versioned."
"Dependencies"
"between"
"models"
"and"
"components"
"are"
"logged,"
"and"
"versions"
"are"
"protected"
"from"
"deletion"
"which"
"participate"
"in"
"other"
"components."
"\n"
"listeners:"
"daemonizing"
"models"
"on"
"database#"
"\n"
"Models"
"may"
"be"
"configured"
"to"
"listen"
"the"
"database"
"for"
"changes,"
"and"
"when"
"new"
"data"
"is"
"inserted,"
"compute"
"new"
"outputs"
"over"
"that"
"data,"
"and"
"store"
"this"
"back"
"in"
"the"
"database."
"\n"
"Database#"
"\n"
"Supported"
"databases#"
"\n"
"Currently"
"supported"
"\n"
"MongoDB"
"\n"
"View"
"plans"
"to"
"support"
"additional"
"databases"
"in"
"the"
"roadmap"
"here."
"\n"
"Datatypes#"
"\n"
"Native"
"support:"
"\n"
"images"
"\n"
"tensors"
"\n"
"arrays"
"\n"
"Configurable"
"\n"
"Any"
"data"
"encodable"
"using"
"a"
"saveable"
"Encoder"
"with"
".encode"
"and"
".decode"
"methods"
"\n"
"Model"
"Feature"
"storage#"
"\n"
"The"
"outputs"
"of"
"models"
"may"
"be"
"stored"
"directly"
"in"
"the"
"database"
"along-side"
"the"
"inputs"
"which"
"led"
"to"
"those"
"outputs."
"These"
"outputs"
"may"
"be"
"flexibly"
"be"
"of"
"any"
"type"
"which"
"can"
"be"
"handled"
"by"
"a"
"SuperDuperDB"
"Encoder."
"\n"
"Features"
"for"
"production"
"use-cases#"
"\n"
"We"
"have"
"support"
"for"
"these"
"features:"
"\n"
"Task"
"parallelization"
"on"
"Dask"
"\n"
"Client-server"
"for"
"working"
"with"
"SuperDuperDB"
"from"
"a"
"remote"
"client"
"\n"
"Change-data"
"capture"
"(CDC):"
"users"
"are"
"enabled"
"to"
"insert"
"data"
"from"
"any"
"client"
"and"
"models"
"may"
"be"
"executed"
"on"
"workers,"
"capturing"
"new"
"inputs"
"and"
"populating"
"outputs"
"to"
"the"
"database"
"\n"
"Vector-search"
"using"
"LanceDB,"
"which"
"is"
"kept"
"in"
"sync"
"with"
"the"
"database"
"using"
"CDC."
"\n"
"Getting"
"started#"
"\n"
"Read"
"the"
"following"
"pages,"
"if"
"you’re"
"interested"
"in"
"getting"
"started"
"working"
"with"
"SuperDuperDB."
"\n"
"Contents#"
"\n"
"Installation#"
"\n"
"Prerequisites#"
"\n"
"We"
"assume"
"you"
"are"
"running:"
"\n"
"Python3.8+"
"\n"
"MongoDB"
"\n"
"The"
"deployments"
"can"
"be"
"existing"
"deployments"
"already"
"running"
"in"
"your"
"infrastructure,"
"or"
"bespoke"
"deployments"
"which"
"you’ll"
"use"
"specifically"
"for"
"SuperDuperDB."
"\n"
"For"
"MongoDB"
"here"
"are"
"instructions"
"for"
"2"
"very"
"popular"
"systems:"
"\n"
"MongoDB"
"installation"
"on"
"Ubuntu"
"\n"
"MongoDB"
"installation"
"on"
"MacOSX"
"\n"
"Installation"
"using"
"pip#"
"\n"
"pip"
"install"
"pinnacledb"
"\n"
"Default"
"configuration#"
"\n"
"SuperDuperDB"
"comes"
"with"
"basic"
"default"
"configurations"
"pinnacledb.misc.config"
"sufficient"
"for"
"working"
"locally"
"with"
"SuperDuperDB."
"For"
"more"
"complex"
"configuration,"
"read"
"here."
"\n"
"Minimum"
"working"
"example#"
"\n"
"To"
"check"
"that"
"everything"
"is"
"working"
"correctly"
"cut"
"and"
"paste"
"this"
"code"
"into"
"a"
"Jupyter"
"notebook:"
"\n"
"Explanation#"
"\n"
"We"
"wrap"
"the"
"pymongo"
"database"
"connector"
"with"
"the"
"pinnacle"
"decorator,"
"allowing"
"SuperDuperDB"
"to"
"communicate"
"with"
"MongoDB"
"and"
"install"
"AI"
"into"
"the"
"database."
"\n"
"We"
"insert"
"several"
"numpy"
"arrays,"
"using"
"the"
"encoder"
"a"
"to"
"encode"
"these"
"as"
"bytes"
"in"
"the"
"database."
"\n"
"We"
"wrap"
"our"
"model,"
"which"
"in"
"this"
"case,"
"is"
"a"
"simple"
"lambda"
"function."
"\n"
"We"
"apply"
"the"
"model"
"to"
"store"
"predictions"
"on"
"the"
"inserted"
"data"
"in"
"the"
"database."
"\n"
"We"
"query"
"the"
"database,"
"to"
"retrieve"
"a"
"sample"
"datapoint."
"\n"
"Add"
"images,"
"audio"
"or"
"video"
"from"
"URIs#"
"\n"
"In"
"this"
"“how-to”"
"guide,"
"we"
"demonstrate"
"how"
"to"
"add"
"images,"
"audio"
"or"
"video"
"to"
"SuperDuperDB."
"\n"
"First,"
"let’s"
"get"
"a"
"Datalayer"
"instance,"
"in"
"order"
"to"
"demonstrate:"
"\n"
"In"
"order"
"to"
"encode,"
"we"
"create"
"an"
"Encoder"
"instance:"
"\n"
"We"
"don’t"
"need"
"to"
"load"
"our"
"objects"
"(images"
"etc.)"
"to"
"add"
"to"
"the"
"DB,"
"we"
"can"
"use"
"URIs"
"instead:"
"\n"
"We"
"can"
"verify"
"that"
"the"
"image"
"was"
"properly"
"stored:"
"\n"
"We"
"can"
"also"
"add"
"Python"
"objects"
"directly:"
"\n"
"Verify:"
"\n"
"How"
"to"
"create"
"a"
"replica"
"set"
"in"
"MongoDB#"
"\n"
"In"
"order"
"to"
"use"
"change"
"data"
"capture"
"in"
"SuperDuperDB"
"together"
"with"
"MongoDB,"
"it’s"
"necessary"
"to"
"use"
"a"
"MongoDB"
"replica"
"set."
"(This"
"is"
"a"
"feature"
"of"
"MongoDB"
"in"
"order"
"to"
"preserve"
"performance"
"of"
"master"
"node.)"
"\n"
"Here’s"
"a"
"step-by-step"
"guide"
"on"
"how"
"to"
"set"
"up"
"such"
"a"
"replica"
"set."
"\n"
"Single"
"Node"
"Setup#"
"\n"
"Start"
"MongoDB"
"Instances:"
"Start"
"MongoDB"
"on"
"each"
"server"
"using"
"the"
"following"
"command"
"(replace"
"/data/db"
"with"
"your"
"data"
"directory"
"path):"
"\n"
"Initialize"
"replica"
"set:"
"In"
"the"
"MongoDB"
"shell,We"
"will"
"initialise"
"replica"
"set"
"with"
"one"
"node."
"Replace"
"the"
"following"
"values"
"accordingly:"
"MONGO_INITDB_USERNAME:"
"yourusername"
"MONGO_INITDB_PASSWORD:"
"yourpassword"
"MONGO_INITDB_DATABASE:"
"yourinitdatabase"
"\n"
"Create"
"an"
"user:"
"Use"
"the"
"above"
"user"
"and"
"password"
"to"
"connect"
"to"
"mongodb"
"\n"
"Done!!"
"\n"
"Multi"
"Node"
"Setup#"
"\n"
"Install"
"MongoDB:"
"First,"
"you"
"need"
"to"
"install"
"MongoDB."
"\n"
"Create"
"Data"
"Directories:"
"Create"
"separate"
"data"
"directories"
"on"
"each"
"server"
"where"
"MongoDB"
"will"
"store"
"its"
"data."
"For"
"example:"
"\n"
"Server"
"1:"
"/data/db"
"\n"
"Server"
"2:"
"/data/db"
"\n"
"Server"
"3:"
"/data/db"
"\n"
"Start"
"MongoDB"
"Instances:"
"Start"
"MongoDB"
"on"
"each"
"server"
"using"
"the"
"following"
"command"
"(replace"
"/data/db"
"with"
"your"
"data"
"directory"
"path):"
"\n"
"Connect"
"to"
"Primary"
"Node:"
"Connect"
"to"
"one"
"of"
"the"
"MongoDB"
"instances."
"This"
"will"
"be"
"the"
"primary"
"node,"
"where"
"you"
"will"
"initiate"
"the"
"replica"
"set"
"configuration."
"\n"
"Initiate"
"Replica"
"Set"
"Configuration:"
"In"
"the"
"MongoDB"
"shell,"
"run"
"the"
"following"
"command"
"to"
"initiate"
"the"
"replica"
"set"
"configuration:"
"\n"
"Add"
"Secondary"
"Nodes:"
"After"
"running"
"rs.initiate(),"
"your"
"primary"
"node"
"is"
"set"
"up."
"Now,"
"you"
"can"
"add"
"the"
"secondary"
"nodes"
"to"
"the"
"replica"
"set"
"using"
"the"
"following"
"command"
"(replace"
"server2:27017,"
"server3:27017,"
"etc.,"
"with"
"the"
"addresses"
"of"
"your"
"secondary"
"nodes):"
"\n"
"Check"
"Replica"
"Set"
"Status:"
"To"
"check"
"the"
"status"
"of"
"your"
"replica"
"set,"
"use"
"the"
"following"
"command"
"in"
"the"
"MongoDB"
"shell:"
"\n"
"Configure"
"Replica"
"Set"
"Options"
"(Optional):"
"You"
"can"
"further"
"customize"
"your"
"replica"
"set"
"by"
"modifying"
"its"
"configuration"
"options,"
"like"
"setting"
"priorities,"
"hidden"
"members,"
"voting"
"configuration,"
"etc."
"Refer"
"to"
"the"
"MongoDB"
"documentation"
"for"
"more"
"details."
"\n"
"How"
"to"
"connect"
"with"
"pinnacledb#"
"\n"
"How"
"to"
"…#"
"\n"
"Contents#"
"\n"
"Perform"
"change"
"data"
"capture"
"(CDC)#"
"\n"
"In"
"a"
"standalone"
"MongoDB"
"deployment,"
"users"
"are"
"required"
"to"
"insert"
"data"
"directly"
"through"
"the"
"SuperDuperDB"
"Datalayer"
"or"
"client"
"(which"
"triggers"
"the"
"Datalayer)."
"For"
"use-cases"
"with"
"multiple"
"users,"
"stakeholders,"
"and"
"potentially"
"automated"
"data-updates"
"on"
"the"
"database,"
"this"
"is"
"not"
"sufficient."
"For"
"that"
"reason"
"SuperDuperDB"
"supports"
"a"
"paradigm"
"known"
"as"
"change-data-capture"
"(CDC)."
"\n"
"In"
"change-data-capture,"
"a"
"service"
"is"
"deployed"
"which"
"listeners"
"the"
"data"
"deployment"
"for"
"changes,"
"and"
"reacts"
"to"
"these"
"changes,"
"activating"
"models"
"which"
"are"
"configured"
"to"
"compute"
"outputs"
"over"
"new"
"data."
"\n"
"In"
"this"
"notebook,"
"we"
"demonstrate"
"how"
"to"
"use"
"CDC"
"with"
"SuperDuperDB."
"\n"
"The"
"notebook"
"requires"
"that"
"a"
"MongoDB"
"replica"
"set"
"has"
"been"
"set"
"up."
"Read"
"about"
"how"
"to"
"do"
"that"
"here."
"\n"
"Insert"
"the"
"data"
"into"
"documents"
"collection"
"\n"
"Create"
"a"
"vector"
"index"
"listener."
"This"
"consist"
"a"
"indexing"
"listener"
"(SentenceTransformer)"
"model"
"to"
"vectorize"
"a"
"key."
"\n"
"Create"
"instance"
"of"
"DatabaseListener"
"and"
"start"
"listening"
"the"
"documents"
"collection."
"\n"
"Check"
"the"
"listener’s"
"status"
"\n"
"You"
"can"
"check"
"information"
"stored"
"by"
"the"
"listener."
"\n"
"Add"
"2"
"documents"
"and"
"check"
"the"
"info"
"again"
"\n"
"Check"
"the"
"inserts"
"info"
"again"
"\n"
"Check"
"that"
"the"
"vectors"
"synced"
"between"
"LanceDB"
"and"
"MongoDB"
"\n"
"Use"
"the"
"identifier"
"to"
"extract"
"the"
"correct"
"table"
"in"
"LanceDB"
"(<model>/<key>)"
"\n"
"Run"
"computations"
"on"
"Dask#"
"\n"
"In"
"this"
"example,"
"we"
"show"
"how"
"to"
"run"
"computations"
"on"
"a"
"Dask"
"cluster,"
"rather"
"than"
"in"
"the"
"same"
"process"
"as"
"data"
"is"
"submitted"
"from."
"This"
"allows"
"compute"
"to"
"be"
"scaled"
"horizontally,"
"and"
"also"
"submitted"
"to"
"workers,"
"which"
"may"
"utilize"
"specialized"
"hardware,"
"including"
"GPUs."
"\n"
"To"
"do"
"this,"
"we"
"need"
"to"
"override"
"the"
"default"
"configuration."
"To"
"do"
"this,"
"we"
"only"
"need"
"specify"
"the"
"configurations"
"which"
"diverge"
"from"
"the"
"defaults."
"In"
"particular,"
"to"
"use"
"a"
"Dask"
"cluster,"
"we"
"specify"
"CFG.distributed"
"="
"True"
"\n"
"We"
"can"
"now"
"confirm,"
"by"
"importing"
"the"
"loaded"
"configuration"
"CFG,"
"that"
"CFG.distribute"
"=="
"True:"
"\n"
"Now"
"that"
"we’ve"
"set"
"up"
"the"
"environment"
"to"
"use"
"a"
"Dask"
"cluster,"
"we"
"can"
"add"
"some"
"data"
"to"
"the"
"Datalayer."
"\n"
"As"
"in"
"the"
"previous"
"tutorials,"
"we"
"can"
"wrap"
"models"
"from"
"a"
"range"
"of"
"AI"
"frameworks"
"to"
"interoperate"
"with"
"the"
"data"
"set,"
"as"
"well"
"as"
"inserting"
"data"
"with,"
"for"
"instances,"
"tensors"
"of"
"a"
"specific"
"data"
"type:"
"\n"
"Now"
"when"
"we"
"instruct"
"the"
"model"
"to"
"make"
"predictions"
"based"
"on"
"the"
"Datalayer,"
"the"
"computations"
"run"
"on"
"the"
"Dask"
"cluster."
"The"
".predict"
"method"
"returns"
"a"
"Job"
"instance,"
"which"
"can"
"be"
"used"
"to"
"monitor"
"the"
"progress"
"of"
"the"
"computation:"
"\n"
"To"
"check"
"that"
"the"
"Datalayer"
"has"
"been"
"populated"
"with"
"outputs,"
"we"
"can"
"check"
"the"
"""_outputs"""
"field"
"of"
"a"
"record:"
"\n"
"Download,"
"install"
"and"
"setup"
"SuperDuperDB#"
"\n"
"Welcome"
"to"
"the"
"SuperDuperDB"
"Playground!"
"\n"
"For"
"demo"
"purposes,"
"the"
"community"
"edition"
"of"
"MongoDB"
"is"
"used."
"This"
"should"
"take"
"less"
"than"
"a"
"minute"
"\n"
"Now"
"lets"
"quickly"
"connect"
"to"
"MongoDB"
"and"
"make"
"it"
"super-duper!!!"
"\n"
"SuperDuperDB"
"documentation#"
"\n"
"🚀"
"Welcome"
"to"
"SuperDuperDB!"
"🚀"
"\n"
"What"
"is"
"SuperDuperDB?#"
"\n"
"SuperDuperDB"
"is"
"a"
"Python"
"package"
"providing"
"tools"
"for"
"developers"
"to"
"apply"
"AI"
"and"
"machine"
"learning"
"in"
"their"
"already"
"deployed"
"MongoDB"
"database,"
"and"
"simultaneously"
"to"
"set-up"
"a"
"scalable,"
"open-source"
"and"
"auditable"
"environment"
"to"
"do"
"this."
"\n"
"Mission#"
"\n"
"At"
"SuperDuperDB,"
"our"
"goal"
"is"
"to"
"massively"
"facilitate"
"and"
"accelerate"
"the"
"developer"
"journey"
"between"
"data"
"and"
"AI"
"models."
"We"
"aim"
"to:"
"\n"
"Create"
"an"
"easy-to-use,"
"extensible"
"and"
"comprehensive"
"Python"
"framework"
"for"
"integrating"
"AI"
"and"
"ML"
"directly"
"to"
"the"
"database:"
"to"
"databases,"
"object-storage,"
"data-lakes"
"and"
"data-warehouses."
"\n"
"Empower"
"developers,"
"data"
"scientists"
"and"
"architects"
"to"
"leverage"
"the"
"vast"
"AI"
"open-source"
"ecosystem"
"in"
"their"
"database"
"deployments."
"\n"
"Enable"
"ways-of-working"
"with"
"AI"
"and"
"data"
"which"
"enable"
"scalability"
"and"
"industrial"
"scale"
"deployment,"
"as"
"well"
"as"
"providing"
"easy-to-use"
"tools"
"for"
"the"
"individual"
"developer."
"\n"
"Make"
"possible"
"continued"
"use"
"of"
"already"
"existing"
"or"
"deployed"
"databases,"
"in"
"combination"
"with"
"AI"
"and"
"ML;"
"no"
"migration"
"of"
"data"
"to"
"a"
"fancy,"
"new"
"fangled"
"vector-database"
"required."
"\n"
"Follow"
"a"
"fully"
"open-source"
"approach,"
"in"
"particular"
"prioritizing"
"open-source"
"integrations"
"in"
"our"
"roadmap"
"going"
"forward"
"\n"
"Enable"
"individuals"
"and"
"organizations"
"to"
"circumvent"
"vendor"
"lock-in"
"strategies"
"now"
"ubiquitous"
"in"
"the"
"AI"
"and"
"ML"
"landscapes,"
"by"
"providing"
"a"
"clear"
"toolset"
"to"
"flexibly"
"deploy"
"AI"
"at"
"the"
"database"
"without"
"necessitating"
"subscriptions,"
"cloud"
"installations,"
"or"
"gated-model-API"
"functionality."
"\n"
"What"
"can"
"you"
"do"
"with"
"SuperDuperDB?#"
"\n"
"Deploy"
"all"
"your"
"AI"
"models"
"to"
"automatically"
"populate"
"model"
"outputs"
"back"
"into"
"MongoDB"
"in"
"a"
"single"
"environment"
"with"
"simple"
"Python"
"commands."
"\n"
"Train"
"models"
"on"
"your"
"data"
"on"
"top"
"of"
"MongoDB"
"simply"
"by"
"querying"
"without"
"additional"
"ingestion"
"and"
"pre-processing."
"\n"
"Integrate"
"AI"
"APIs"
"(such"
"as"
"OpenAI)"
"to"
"work"
"together"
"with"
"other"
"models"
"on"
"your"
"data"
"effortlessly."
"\n"
"Search"
"your"
"data"
"in"
"MongoDB"
"with"
"vector-search,"
"including"
"model"
"management"
"and"
"serving."
"\n"
"Who"
"is"
"SuperDuperDB"
"for?#"
"\n"
"Python"
"developers"
"using"
"MongoDB"
"who"
"want"
"to"
"use"
"AI"
"in"
"their"
"applications"
"with"
"ease."
"\n"
"Data"
"scientists"
"&"
"ML"
"engineers"
"who"
"want"
"to"
"develop"
"AI"
"models"
"using"
"their"
"favourite"
"tools,"
"with"
"minimum"
"infrastructural"
"overhead."
"\n"
"Infrastructure"
"engineers"
"who"
"want"
"a"
"single"
"scalable"
"setup"
"that"
"supports"
"both"
"local,"
"on-prem"
"and"
"cloud"
"deployment."
"\n"
"SuperDuperDB"
"transforms"
"your"
"MongoDB"
"into#"
"\n"
"An"
"end-to-end"
"live"
"AI"
"deployment"
"which"
"includes"
"a"
"model"
"repository"
"and"
"registry,"
"model"
"training"
"and"
"computation"
"of"
"outputs/"
"inference"
"\n"
"A"
"feature"
"store"
"in"
"which"
"the"
"model"
"outputs"
"are"
"stored"
"alongside"
"the"
"inputs"
"in"
"any"
"data"
"format."
"\n"
"A"
"fully"
"functional"
"vector"
"database"
"to"
"easily"
"generate"
"vector"
"embeddings"
"of"
"your"
"data"
"with"
"your"
"favorite"
"models"
"and"
"APIs"
"and"
"connect"
"them"
"with"
"MongoDB"
"or"
"LanceDB"
"vector"
"search"
"\n"
"(Coming"
"soon)"
"A"
"model"
"performance"
"monitor"
"enabling"
"model"
"quality"
"and"
"degradation"
"to"
"be"
"monitored"
"as"
"new"
"data"
"is"
"inserted"
"\n"
"Background#"
"\n"
"SuperDuperDB"
"is"
"the"
"result"
"of"
"years"
"of"
"experience"
"in"
"research,"
"development"
"and"
"production"
"for"
"AI"
"and"
"data."
"We"
"have"
"come"
"to"
"believe"
"that"
"AI"
"development"
"with"
"data"
"does"
"not"
"need"
"to"
"be"
"as"
"hard"
"as"
"it"
"currently"
"is."
"(Read"
"“common_issues”"
"for"
"more"
"context.)"
"By"
"moving"
"to"
"a"
"closer"
"symbiosis"
"of"
"AI"
"and"
"the"
"database,"
"we"
"believe"
"many"
"pain-points"
"in"
"AI"
"development"
"become"
"non-issues."
"With"
"SuperDuperDB:"
"\n"
"Model"
"predictions"
"may"
"be"
"evaluated"
"and"
"inserted"
"back"
"into"
"the"
"database,"
"without"
"ever"
"needing"
"to"
"load"
"data"
"from"
"the"
"database"
"to"
"the"
"client-side."
"\n"
"Training"
"may"
"be"
"deployed"
"in"
"one"
"line,"
"without"
"having"
"to"
"munge,"
"preprocess"
"or"
"fetch"
"data;"
"simply"
"point"
"to"
"the"
"data"
"with"
"a"
"data-base"
"query."
"\n"
"Models"
"may"
"be"
"configured"
"to"
"listen"
"for"
"incoming"
"data,"
"maintaining"
"a"
"catalogue"
"of"
"up-to-date"
"predictions"
"and"
"features."
"\n"
"Working"
"with"
"difficult"
"data"
"types,"
"(images,"
"audio,"
"etc.)"
"requires"
"no"
"additional"
"effort"
"in"
"comparison"
"to"
"working"
"with"
"“standard"
"data”"
"(numbers,"
"text,"
"etc.)"
"\n"
"Outputs"
"of"
"configured"
"AI"
"models"
"may"
"be"
"used"
"to"
"“navigate”"
"the"
"database,"
"including"
"configuring"
"and"
"using"
"vector-search"
"with"
"just"
"a"
"few"
"lines"
"of"
"Python"
"code."
"\n"
"Code"
"snippets"
"to"
"pique"
"your"
"interest!#"
"\n"
"Model"
"frameworks"
"directly"
"integrated"
"with"
"the"
"database#"
"\n"
"SuperDuperDB"
"includes"
"wrappers"
"for"
"treating"
"models"
"from"
"diverse"
"AI"
"frameworks"
"across"
"the"
"open-source"
"Python"
"ecosystem"
"uniformly"
"in"
"combination"
"with"
"the"
"database,"
"using"
"a"
"scikit-learn-like"
".fit()"
"and"
".predict()"
"API."
"\n"
"Continuous"
"model"
"processing"
"on"
"incoming"
"data#"
"\n"
"SuperDuperDB"
"contains"
"components"
"allowing"
"developers"
"to"
"configure"
"models"
"to"
"continuously"
"infer"
"outputs"
"on"
"specified"
"data,"
"and"
"save"
"the"
"outputs"
"back"
"to"
"the"
"database."
"\n"
"Use"
"models"
"outputs"
"as"
"inputs"
"to"
"downstream"
"models#"
"\n"
"Simply"
"add"
"a"
"simple"
"method"
"featurize"
"to"
"your"
"queries,"
"to"
"register"
"the"
"fact"
"that"
"one"
"model"
"depends"
"on"
"another:"
"\n"
"Support"
"for"
"“tricky”"
"datatypes#"
"\n"
"SuperDuperDB"
"includes"
"tools"
"for"
"working"
"with"
"the"
"database"
"using"
"the"
"complex"
"data"
"types"
"necessary"
"for"
"AI,"
"such"
"as"
"vectors,"
"tensors,"
"images,"
"audio"
"etc."
"Native"
"python"
"types"
"may"
"be"
"flexibly"
"saved"
"to"
"the"
"DB,"
"to"
"ease"
"use"
"in"
"tricky"
"AI"
"use-cases,"
"such"
"as"
"computer"
"vision:"
"\n"
"Data"
"may"
"be"
"reloaded"
"using"
"standard"
"database"
"queries,"
"and"
"conveniently"
"reused"
"in"
"downstream"
"applications,"
"or"
"consumed"
"as"
"direct"
"inputs"
"to"
"AI"
"models."
"The"
"data"
"loaded"
"are"
"instances"
"of"
"the"
"same"
"Python"
"classes"
"as"
"inserted."
"\n"
"Use"
"your"
"classical"
"database"
"as"
"a"
"vector"
"database#"
"\n"
"SuperDuperDB"
"contains"
"functionality"
"allowing"
"users"
"to"
"treat"
"their"
"standard"
"database"
"as"
"a"
"vector-search"
"database,"
"integrating"
"your"
"primary"
"database"
"with"
"key-players"
"in"
"the"
"open-source"
"vector-search"
"space."
"\n"
"Contents#"
"\n"
"Python"
"Module"
"Index"
"\n"
"Error"
"\n"
"Please"
"activate"
"JavaScript"
"to"
"enable"
"the"
"search"
"functionality."
"\n"
"Datasets#"
"\n"
"Note"
"\n"
"Datasets"
"are"
"immutable"
"snapshots"
"of"
"the"
"DB"
"\n"
"When"
"building"
"AI"
"models,"
"in"
"many"
"cases,"
"especially"
"for"
"validation,"
"it’s"
"important"
"that"
"immutable"
"snapshots"
"of"
"data"
"are"
"maintained"
"for"
"posterity."
"The"
"purpose"
"of"
"this"
"practice"
"is:"
"\n"
"To"
"foster"
"reproducibility"
"and"
"transparency"
"in"
"experimentation."
"\n"
"To"
"have"
"a"
"permanent"
"benchmark"
"via"
"which"
"models"
"may"
"be"
"compared."
"\n"
"To"
"maintain"
"a"
"record"
"for"
"auditors"
"and"
"oversight"
"committees"
"to"
"refer"
"to"
"in"
"the"
"worst"
"case."
"\n"
"Correspondingly,"
"SuperDuperDB"
"distinguishes"
"between"
"datasets"
"and"
"data"
"queries"
"from"
"the"
"DB."
"The"
"Dataset"
"is"
"designed"
"to"
"be"
"fetched"
"only"
"once,"
"and"
"preserved"
"as"
"an"
"Artifact,"
"saved"
"in"
"the"
"configured"
"artifact"
"store."
"\n"
"Here"
"is"
"an"
"example"
"of"
"creating"
"a"
"SuperDuperDB"
"dataset:"
"\n"
"This"
"dataset"
"may"
"be"
"used"
"for"
"validation"
"of"
"diverse"
"Model"
"instances"
"during"
"training"
"and"
"otherwise,"
"simply"
"by"
"referring"
"to"
"the"
"identifier:"
"\n"
"Datasets,"
"as"
"with"
"other"
"Component"
"descendants,"
"may"
"be"
"created"
"inline:"
"\n"
"DB#"
"\n"
"Note"
"\n"
"The"
"DB"
"is"
"the"
"primary"
"interface"
"from"
"Python"
"to"
"your"
"data+AI."
"\n"
"The"
"central"
"object"
"for"
"communicating"
"with"
"MongoDB"
"in"
"SuperDuperDB"
"is"
"the"
"DB."
"\n"
"The"
"DB"
"object"
"combines"
"4"
"basic"
"functionalities"
"involved"
"in"
"integrating"
"AI"
"to"
"the"
"database:"
"\n"
"Querying,"
"updating"
"and"
"inserting"
"data"
"\n"
"Uploading"
"and"
"saving"
"AI"
"models"
"and"
"associated"
"functionality"
"involving"
"large"
"data-blobs"
"\n"
"Saving"
"metadata"
"related"
"to"
"AI"
"models"
"and"
"associated"
"functionality"
"\n"
"(Optional)"
"performing"
"vector"
"search"
"on"
"the"
"database"
"using"
"configured"
"AI"
"models"
"\n"
"Correspondingly"
"a"
"database"
"may"
"be"
"built"
"by"
"passing"
"these"
"4"
"items"
"to"
"the"
"DB.__init__"
"method:"
"\n"
"Connecting"
"these"
"4"
"elements"
"in"
"this"
"way"
"can"
"be"
"slightly"
"tedious,"
"so"
"we"
"provide"
"a"
"helper"
"function"
"to"
"do"
"this"
"on"
"the"
"basis"
"of"
"the"
"current"
"configuration"
"(see"
"here"
"for"
"information"
"about"
"configuration)."
"\n"
"In"
"order"
"to"
"build"
"a"
"database"
"based"
"on"
"MongoDB"
"defaults,"
"a"
"one-size-fits-all"
"wrapper"
"is:"
"\n"
"Databackend#"
"\n"
"Currently"
"we"
"support"
"MongoDB"
"as"
"the"
"data"
"backend."
"\n"
"Artifact"
"Store#"
"\n"
"Currently"
"we"
"support"
"gridfs"
"on"
"MongoDB"
"as"
"the"
"artifact"
"store."
"\n"
"Metadata"
"Store#"
"\n"
"Currently"
"we"
"support"
"MongoDB"
"as"
"the"
"metadata"
"store."
"\n"
"Encoders#"
"\n"
"Note"
"\n"
"The"
"Encoder"
"class"
"allows"
"SuperDuperDB"
"to"
"store"
"Python"
"objects"
"in"
"the"
"DB,"
"and"
"to"
"recall"
"them"
"in"
"the"
"same"
"format"
"in"
"which"
"they"
"were"
"stored."
"\n"
"SuperDuperDB"
"supports"
"insertion"
"of"
"any"
"standard"
"datatypes"
"supported"
"by"
"the"
"underlying"
"database."
"However,"
"in"
"many"
"AI"
"use-cases,"
"these"
"data-types"
"are"
"not"
"sufficient"
"for"
"the"
"intended"
"data."
"A"
"typical"
"example"
"is"
"computer-vision"
"use-cases,"
"utilizing"
".jpg"
"or"
".png"
"images,"
"for"
"which"
"MongoDB,"
"for"
"example,"
"does"
"not"
"provide"
"native"
"support."
"\n"
"In"
"order"
"to"
"use"
"such"
"complex"
"data,"
"SuperDuperDB"
"provides"
"the"
"Encoder"
"abstraction."
"Users"
"may"
"create"
"their"
"own"
"encoders"
"with"
"SuperDuperDB"
"using"
"this"
"abstraction"
"directly,"
"and"
"register"
"these"
"encoders"
"with"
"SuperDuperDB"
"using"
"db.add."
"\n"
"SuperDuperDB"
"also"
"includes"
"pre-baked"
"encoders"
"in"
"pinnacledb.encoders."
"For"
"example,"
"images"
"may"
"be"
"encoded"
"with"
"pinnacledb.encoders.pillow.image.pil_image"
"Encoders"
"make"
"it"
"possible"
"to"
"encode"
"Python"
"objects"
"inserted"
"into"
"the"
"database,"
"with"
"just"
"a"
"few"
"modifications"
"of"
"a"
"standard"
"insert:"
"\n"
"Encoders"
"in"
"use"
"with"
"the"
"database"
"may"
"be"
"displayed"
"with"
"db.show:"
"\n"
"Given"
"that"
"we"
"have"
"setup"
"our"
"encoders"
"and"
"data"
"in"
"this"
"way,"
"when"
"we"
"reload"
"our"
"data,"
"using"
"database"
"queries,"
"the"
"data"
"is"
"reloaded"
"in"
"the"
"same"
"format"
"we"
"saved"
"in:"
"\n"
"SuperDuperDB"
"may"
"now"
"be"
"used"
"to"
"use"
"this"
"downstream"
"in"
"models"
"which"
"require"
"these"
"complex"
"datatypes"
"as"
"inputs"
"and/"
"or"
"outputs."
"\n"
"SuperDuperDB"
"Usage#"
"\n"
"Important"
"Concepts#"
"\n"
"The"
"SuperDuperDB"
"workflow"
"looks"
"like"
"this:"
"\n"
"The"
"user"
"adds"
"data"
"to"
"the"
"DB,"
"which"
"may"
"include"
"user"
"defined"
"encoders,"
"and"
"external"
"web"
"or"
"other"
"content."
"\n"
"The"
"user"
"uploads"
"one"
"or"
"more"
"models"
"including"
"weights"
"or"
"parameters"
"to"
"SuperDuperDB,"
"configuring"
"which"
"models"
"should"
"be"
"applied"
"to"
"which"
"data,"
"by"
"linking"
"models"
"to"
"a"
"query"
"and"
"key,"
"in"
"a"
"listener."
"\n"
"(Optionally)"
"SuperDuperDB"
"creates"
"a"
"job"
"to"
"train"
"the"
"uploaded"
"models"
"on"
"the"
"data"
"contained"
"in"
"the"
"database."
"\n"
"SuperDuperDB"
"applies"
"the"
"models"
"to"
"the"
"configured"
"data"
"and"
"the"
"outputs"
"are"
"stored"
"in"
"the"
"documents"
"to"
"which"
"the"
"models"
"were"
"applied."
"\n"
"SuperDuperDB"
"listenes"
"for"
"when"
"new"
"data"
"comes"
"in,"
"when"
"the"
"models"
"which"
"have"
"already"
"been"
"uploaded"
"are"
"reactivated."
"\n"
"(Optionally)"
"SuperDuperDB"
"retrains"
"models"
"on"
"the"
"latest"
"data."
"\n"
"SuperDuperDB"
"creates"
"a"
"job"
"to"
"apply"
"the"
"models"
"to"
"data,"
"which"
"has"
"yet"
"to"
"be"
"processed,"
"and"
"the"
"outputs"
"are"
"stored"
"in"
"the"
"documents"
"to"
"which"
"the"
"models"
"were"
"applied."
"\n"
"At"
"inference"
"time,"
"the"
"outputs"
"of"
"the"
"applied"
"models"
"may"
"be"
"queried"
"using"
"classical"
"DB"
"queries,"
"or,"
"if"
"the"
"outputs"
"are"
"vectors,"
"searched"
"using"
"a"
"vector-index."
"\n"
"The"
"key"
"concepts"
"are"
"detailed"
"below."
"\n"
"Contents#"
"\n"
"Models#"
"\n"
"Note"
"\n"
"The"
"SuperDuperDB"
"Model"
"wrapper"
"is"
"an"
"extension"
"of"
"standard"
"Python-AI-ecosystem"
"models."
"Model"
"adds"
"preprocessing,"
"postprocessing,"
"and"
"communication"
"with"
"the"
"DB"
"to"
"the"
"standard"
"toolkit."
"\n"
"In"
"SuperDuperDB,"
"the"
"primary"
"mode"
"to"
"integrating"
"a"
"new"
"AI"
"model,"
"framework"
"or"
"API"
"provider"
"is"
"via"
"the"
"Model"
"abstraction."
"This"
"maybe"
"thought"
"of"
"in"
"the"
"following"
"way:"
"\n"
"A"
"wrapper"
"around"
"AI"
"frameworks"
"facilitating"
"use"
"of"
"models"
"with"
"the"
"database."
"\n"
"A"
"self"
"contained"
"unit"
"of"
"functionality"
"handling"
"all"
"communication"
"with"
"the"
"database."
"\n"
"A"
"unifying"
"abstraction"
"bringing"
"all"
"AI"
"frameworks"
"onto"
"a"
"single"
"playing"
"field."
"\n"
"An"
"trainable,"
"parametrizable"
"extension"
"of"
"UDFs"
"from"
"traditional"
"databasing."
"\n"
"The"
"uniformity"
"of"
"the"
"abstraction"
"is"
"inspired"
"by"
"the"
"Sklearn"
".fit,"
".predict"
"paradigm,"
"but"
"with"
"additional"
"features"
"which"
"are"
"required"
"in"
"order"
"to"
"allow"
"the"
"models"
"to"
"read"
"and"
"write"
"to"
"the"
"database."
"We"
"extend"
"this"
"paradigm"
"to"
"frameworks,"
"which"
"have"
"taken"
"their"
"own"
"path"
"in"
"API"
"design,"
"bringing"
"all"
"frameworks"
"into"
"a"
"single"
"world"
"of"
"terminology"
"and"
"functionality."
"\n"
"Supported"
"frameworks#"
"\n"
"The"
"following"
"frameworks"
"are"
"supported"
"natively"
"by"
"SuperDuperDB:"
"\n"
"sklearn"
"\n"
"torch"
"\n"
"transformers"
"\n"
"openai"
"\n"
"The"
"key"
"class"
"is"
"located"
"in"
"pinnacledb.ext.<framework>.<Framework>Model:"
"\n"
"pinnacledb.ext.sklearn.SklearnModel."
"\n"
"pinnacledb.ext.torch.TorchModel."
"\n"
"pinnacledb.ext.transformers.TransformersModel."
"\n"
"pinnacledb.ext.openai.OpenAIModel."
"\n"
"The"
"wrappers"
"from"
"each"
"framework"
"include"
"parameters"
"fom"
"the"
"Model"
"base"
"class:"
"\n"
"See"
"below"
"for"
"an"
"explanation"
"of"
"each"
"of"
"these"
"parameters."
"Here"
"are"
"examples"
"of"
"each"
"of"
"these"
"parameters"
"in"
"several"
"frameworks"
"and"
"applications:"
"\n"
"Application"
"\n"
"Task"
"\n"
"Framework(s)"
"\n"
"object"
"\n"
"preprocess"
"\n"
"postprocess"
"\n"
"encoder"
"\n"
"Vision"
"\n"
"Classification"
"\n"
"torch"
"\n"
"CNN"
"\n"
"torchvision.transforms"
"\n"
"Top-K"
"estimate"
"\n"
"None"
"\n"
"Generative"
"\n"
"Image"
"generation"
"\n"
"torch"
"\n"
"GAN"
"\n"
"None"
"\n"
"None"
"\n"
"pillow"
"\n"
"NLP"
"\n"
"LLM"
"\n"
"transformers"
"\n"
"Transformer"
"\n"
"Tokenizer"
"\n"
"Sampling"
"\n"
"None"
"\n"
"Risk"
"\n"
"Fraud"
"detection"
"\n"
"sklearn"
"\n"
"Estimator"
"\n"
"None"
"\n"
"None"
"\n"
"None"
"\n"
"Search"
"\n"
"Vector"
"Search"
"\n"
"openai"
"\n"
"OpenAI"
"Embedding"
"\n"
"None"
"\n"
"None"
"\n"
"None"
"\n"
"PyTorch#"
"\n"
"PyTorch"
"is"
"the"
"most"
"flexible"
"framework"
"we"
"have"
"integrated."
"It"
"allows"
"users"
"to"
"define"
"arbitrary"
"logic"
"in"
"the"
"forward"
"pass,"
"and"
"use"
"backpropagation"
"training"
"to"
"calibrate"
"models"
"on"
"the"
"data."
"\n"
"Tranformers#"
"\n"
"Transformers"
"provides"
"a"
"large"
"compendium"
"of"
"pre-trained"
"and"
"pre-defined"
"architectures"
"and"
"pipelines."
"Their"
"transformers.Pipeline"
"abstraction"
"fits"
"well"
"with"
"the"
"Model"
"framework:"
"\n"
"Sklearn#"
"\n"
"Sklearn"
"provides"
"a"
"large"
"library"
"of"
"classical"
"estimators"
"and"
"non-deep"
"learning"
"machine"
"learning"
"algorithms."
"These"
"algorithms"
"mostly"
"work"
"directly"
"with"
"numerical"
"data:"
"\n"
"OpenAI#"
"\n"
"Since"
"OpenAI"
"consists"
"of"
"calls"
"to"
"an"
"external"
"API,"
"it’s"
"model"
"definitions"
"are"
"slightly"
"different:"
"\n"
"Quickly"
"porting"
"models"
"to"
"SuperDuperDB#"
"\n"
"pinnacle(model)"
"provides"
"a"
"shortcut"
"to"
"importing"
"the"
"model"
"class"
"directly:"
"\n"
"Applying"
"models"
"to"
"data"
"with"
".predict#"
"\n"
"All"
"of"
"the"
"models"
"which"
"we"
"created"
"in"
"the"
"previous"
"step"
"are"
"now"
"ready"
"to"
"be"
"applied"
"to"
"the"
"database:"
"\n"
"A"
"similar"
"result"
"may"
"be"
"obtained"
"by"
"replaced"
"the"
"svm"
"by"
"any"
"of"
"the"
"other"
"models"
"above."
"\n"
"Training"
"models"
"on"
"data"
"with"
".fit#"
"\n"
"Using"
"the"
"same"
"analogy"
"to"
"sklearn"
"above,"
"SuperDuperDB"
"supports"
"“in-database”"
"training"
"of"
"models:"
"\n"
"Model"
"design#"
"\n"
"Models"
"in"
"SuperDuperDB"
"differ"
"from"
"models"
"in"
"the"
"standard"
"AI"
"frameworks,"
"by"
"including"
"several"
"additional"
"aspects:"
"\n"
"preprocessing"
"\n"
"postprocessing"
"\n"
"output"
"encoding"
"\n"
"Preprocessing#"
"\n"
"All"
"models"
"in"
"SuperDuperDB"
"include"
"the"
"keyword"
"argument"
"preprocess."
"The"
"exact"
"meaning"
"of"
"this"
"varies"
"from"
"framework"
"to"
"framework,"
"however"
"in"
"general:"
"\n"
"Important"
"\n"
"Model.preprocess"
"is"
"a"
"function"
"which"
"takes"
"an"
"individual"
"data-point"
"from"
"the"
"database,"
"and"
"prepares"
"it"
"for"
"processing"
"by"
"the"
"AI"
"framework"
"model"
"\n"
"For"
"example:"
"\n"
"In"
"PyTorch"
"(torch)"
"computer"
"vision"
"models,"
"a"
"preprocessing"
"function"
"might:"
"\n"
"Crop"
"the"
"image"
"\n"
"Normalize"
"the"
"pixel"
"values"
"by"
"precomputed"
"constants"
"\n"
"Resize"
"the"
"image"
"\n"
"Convert"
"the"
"image"
"to"
"a"
"tensor"
"\n"
"In"
"Hugging"
"Face"
"transformers,"
"and"
"NLP"
"model"
"will:"
"\n"
"Tokenize"
"a"
"sentence"
"into"
"word-pieces"
"\n"
"Convert"
"each"
"word"
"piece"
"into"
"a"
"numerical"
"ID"
"\n"
"Truncate"
"and"
"pad"
"the"
"IDs"
"\n"
"Compute"
"a"
"mask"
"\n"
"In"
"Scikit-Learn,"
"estimators"
"operate"
"purely"
"at"
"the"
"numerical"
"level"
"\n"
"Preprocessing"
"may"
"be"
"added"
"exactly"
"as"
"for"
"PyTorch"
"\n"
"Alternatively"
"users"
"may"
"use"
"a"
"sklearn.pipeline.Pipeline"
"explicitly"
"\n"
"Postprocessing#"
"\n"
"All"
"models"
"in"
"SuperDuperDB"
"include"
"the"
"keyword"
"argument"
"postprocess."
"The"
"goal"
"here"
"is"
"to"
"take"
"the"
"numerical"
"estimates"
"of"
"a"
"model,"
"and"
"convert"
"these"
"to"
"a"
"form"
"to"
"be"
"used"
"by"
"database"
"users."
"Examples"
"are:"
"\n"
"Converting"
"a"
"softmax"
"over"
"a"
"dictionary"
"in"
"NLP"
"to"
"point"
"estimates"
"and"
"human-readable"
"strings"
"\n"
"Converting"
"a"
"generated"
"image-tensor"
"into"
"JPG"
"or"
"PNG"
"format"
"\n"
"Performing"
"additional"
"inference"
"logic,"
"such"
"as"
"beam-search"
"in"
"neural"
"translation"
"\n"
"Encoding#"
"\n"
"The"
"aim"
"of"
"postprocessing"
"is"
"to"
"provide"
"outputs"
"in"
"a"
"operationally"
"useful"
"form."
"However,"
"often"
"this"
"form"
"isn’t"
"directly"
"amenable"
"to"
"insertion"
"in"
"the"
"DB."
"For"
"example,"
"MongoDB"
"doesn’t"
"support"
"images"
"or"
"tensors"
"natively."
"Consequently"
"each"
"model"
"takes"
"the"
"keyword"
"encoder,"
"allowing"
"users"
"to"
"specify"
"exactly"
"how"
"outputs"
"are"
"stored"
"in"
"the"
"database"
"as"
"bytes,"
"if"
"not"
"supported"
"natively"
"by"
"the"
"database."
"Read"
"more"
"here."
"\n"
"Supported"
"frameworks#"
"\n"
"SuperDuperDB"
"has"
"native"
"support"
"for:"
"\n"
"PyTorch"
"\n"
"Hugging-Face"
"\n"
"Sklearn"
"\n"
"OpenAI"
"\n"
"Other"
"model"
"frameworks"
"may"
"be"
"used"
"for"
"inference"
"only"
"(model.predict)."
"\n"
"Daemonizing"
"models"
"with"
"listeners#"
"\n"
"Models"
"can"
"be"
"configured"
"so"
"that,"
"when"
"new"
"data"
"is"
"inserted"
"through"
"SuperDuperDB"
"database,"
"then"
"the"
"models"
"spring"
"into"
"action,"
"processing"
"this"
"new"
"data,"
"and"
"repopulating"
"outputs"
"back"
"into"
"the"
"database."
"\n"
"An"
"equivalent"
"syntax"
"is"
"the"
"following:"
"\n"
"After"
"setting"
"up"
"a"
"listener,"
"whenever"
"data"
"is"
"inserted"
"or"
"updated,"
"jobs"
"are"
"created"
"which"
"save"
"the"
"outputs"
"of"
"the"
"model"
"in"
"the"
"""_outputs"""
"field."
"\n"
"A"
"listener"
"may"
"also"
"be"
"configured"
"in"
"cluster"
"mode,"
"to"
"listen"
"for"
"changes"
"coming"
"in"
"from"
"any"
"sources"
"-"
"i.e."
"changes"
"are"
"not"
"just"
"detected"
"through"
"the"
"SuperDuperDB"
"system."
"Read"
"more"
"about"
"that"
"here."
"\n"
"Queries#"
"\n"
"Note"
"\n"
"SuperDuperDB"
"wraps"
"the"
"standard"
"MongoDB"
"query"
"API."
"It"
"augments"
"these"
"queries"
"with"
"support"
"for"
"vector-search"
"and"
"recall"
"of"
"complex"
"data-types."
"\n"
"SuperDuperDB"
"queries"
"are"
"based"
"on"
"the"
"queries"
"of"
"the"
"underlying"
"database,"
"upon"
"which"
"the"
"DB"
"is"
"based"
"(see"
"the"
"section"
"on"
"the"
"DB)."
"\n"
"Unlike"
"some"
"Python"
"clients,"
"in"
"SuperDuperDB,"
"queries"
"are"
"objects,"
"rather"
"then"
"methods"
"or"
"functions."
"This"
"allows"
"SuperDuperDB"
"to"
"serialize"
"these"
"queries"
"for"
"use"
"in"
"diverse"
"tasks,"
"such"
"as"
"model"
"applications"
"using"
"the"
"Listener"
"paradigm"
"(see"
"here),"
"model"
"application,"
"and"
"management"
"of"
"vector-indices)."
"\n"
"A"
"query"
"is"
"executed"
"as"
"follows:"
"\n"
"MongoDB#"
"\n"
"We"
"currently"
"support"
"MongoDB"
"as"
"the"
"database"
"backend."
"As"
"in"
"pymongo"
"all"
"queries"
"operate"
"at"
"the"
"collection"
"level:"
"\n"
"With"
"this"
"collection"
"standard"
"query"
"types"
"may"
"be"
"executed."
"Whereas"
"pymongo"
"returns"
"vanilla"
"python"
"dictionaries,"
"SuperDuperDB"
"returns"
"dictionaries"
"wrapped"
"as"
"Document"
"instances:"
"\n"
"Documents"
"are"
"also"
"used,"
"whenever"
"a"
"query"
"involves"
"inserting"
"data"
"into"
"the"
"database."
"The"
"reason"
"for"
"this,"
"is"
"that"
"the"
"data"
"may"
"contain"
"complex"
"data-types"
"such"
"as"
"images"
"(see"
"the"
"section"
"on"
"encoders"
"for"
"more"
"detail):"
"\n"
"SuperDuperDB"
"also"
"includes"
"a"
"composite"
"API,"
"enabling"
"support"
"for"
"vector-search"
"together"
"with"
"the"
"query"
"API"
"of"
"the"
"database:"
"see"
"the"
"section"
"on"
"vector-search"
"for"
"details."
"\n"
"Supported"
"MongoDB"
"queries:"
"\n"
"find_one"
"\n"
"find"
"\n"
"aggregate"
"\n"
"update_one"
"\n"
"update_many"
"\n"
"delete_many"
"\n"
"Featurization#"
"\n"
"In"
"some"
"AI"
"applications,"
"for"
"instance"
"in"
"transfer"
"learning,"
"it"
"is"
"useful"
"to"
"“represent”"
"data"
"using"
"some"
"model-derived"
"“features”."
"We"
"support"
"featurization"
"in"
"combination"
"with"
"find"
"and"
"find_one"
"queries:"
"\n"
"To"
"do"
"this,"
"one"
"chains"
"these"
"methods"
"with"
".featurize,"
"specifying"
"the"
"model"
"with"
"which"
"one"
"would"
"like"
"to"
"featurize."
"In"
"MongoDB"
"this"
"comes"
"out"
"as:"
"\n"
"See"
"the"
"model"
"section"
"for"
"information"
"on"
"how"
"to"
"compute"
"and"
"keep"
"features"
"(model"
"outputs)"
"up"
"to"
"date."
"\n"
"Vector"
"Search"
"queries#"
"\n"
"If"
"one"
"or"
"more"
"VectorIndex"
"instances"
"have"
"been"
"configured"
"together"
"with"
"the"
"DB,"
"these"
"may"
"be"
"used"
"in"
"hybrid"
"queries"
"together"
"with"
"standard"
"databasing"
"queries:"
"\n"
"See"
"here"
"for"
"more"
"background"
"on"
"vector-search"
"and"
"VectorIndex"
"functionality."
"\n"
"Vector"
"Indexes#"
"\n"
"Note"
"\n"
"SuperDuperDB"
"provides"
"first-class"
"support"
"for"
"Vector-Search,"
"including"
"encoding"
"of"
"inputs"
"by"
"arbitrary"
"AI"
"models."
"\n"
"SuperDuperDB"
"has"
"support"
"for"
"vector-search"
"via"
"LanceDB"
"using"
"vector-indexes."
"We"
"are"
"working"
"on"
"support"
"for"
"vector-search"
"via"
"MongoDB"
"enterprise"
"search"
"in"
"parallel."
"\n"
"Vector-indexes"
"build"
"on"
"top"
"of"
"the"
"DB,"
"models"
"and"
"listeners."
"\n"
"Creating"
"vector"
"indexes#"
"\n"
"In"
"order"
"to"
"build"
"a"
"vector"
"index,"
"one"
"defines"
"one"
"or"
"two"
"models,"
"and"
"daemonizes"
"them"
"with"
"listeners."
"In"
"the"
"simples"
"variant"
"one"
"does"
"simply:"
"\n"
"The"
"model"
"my-model"
"should"
"have"
"already"
"been"
"registered"
"with"
"SuperDuperDB"
"(see"
"models"
"for"
"help)."
"my-key"
"is"
"the"
"field"
"to"
"be"
"searched."
"Together"
"my-model/my-key"
"refer"
"to"
"the"
"listener"
"component"
"(previously"
"created)"
"which"
"is"
"responsible"
"for"
"computing"
"vectors"
"from"
"the"
"data."
"See"
"here"
"for"
"how"
"to"
"create"
"such"
"a"
"component."
"\n"
"Alternatively"
"the"
"model"
"and"
"listener"
"may"
"be"
"created"
"inline."
"Here"
"is"
"how"
"to"
"define"
"a"
"simple"
"libear"
"bag-of-words"
"model:"
"\n"
"Using"
"vector"
"indexes"
"with"
"MongoDB#"
"\n"
"To"
"use"
"your"
"vector"
"index"
"to"
"search"
"MongoDB,"
"there"
"are"
"two"
"possibilities:"
"\n"
"Firstly,"
"find"
"similar"
"matches"
"and"
"then"
"filter"
"the"
"results:"
"\n"
"Secondly,"
"filter"
"the"
"data"
"and"
"find"
"similar"
"matches"
"within"
"the"
"results:"
"\n"
