version: "3.9"
services:

  # ------------------------------
  # MongoDB Datastore
  # ------------------------------
  mongodb:
    image: mongo:6
    hostname: mongodb
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=localhost
    ports:
      - "27017:27017"
    command : ["/bin/sh", "-c", "mongod --replSet rs0 --port 27017 --bind_ip 0.0.0.0 --dbpath /data/db/"]

  mongo-init: # Once finished, Mongo is assumed to be ready.
    image: mongo:6
    depends_on:
      - mongodb
    volumes:
      - ./mongo-init.sh:/scripts/mongo-init.sh
    env_file:
    - users.env
    command: sh -c "/scripts/mongo-init.sh"


   # Vector Search Service
   # ------------------------------
  vector-search:
    depends_on:
      mongo-init:
        condition: service_completed_successfully
    image: pinnacledb/sandbox
    hostname: vector-search
    ports:
      - "8000:8000"
    command:
      - /bin/sh
      - -c
      - |
        pinnacleDB_DATA_BACKEND='mongodb://pinnacle:pinnacle@mongodb:27017/test_db' python -m pinnacledb vector-search

    healthcheck:
      test: curl http://localhost:8000/health || exit 1
      interval: 40s
      timeout: 30s
      retries: 10
      start_period: 60s

  vector-search-init: # Once finished, Vector Search is assumed to be ready.
    image: busybox
    depends_on:
      vector-search:
        condition: service_healthy


   # Change Data Capture Service
   # ------------------------------
  cdc:
    depends_on:
      mongo-init:
        condition: service_completed_successfully
    image: pinnacledb/sandbox
    hostname: cdc
    ports:
      - "8001:8001"
    command:
      - /bin/sh
      - -c
      - |
        pinnacleDB_DATA_BACKEND='mongodb://pinnacle:pinnacle@mongodb:27017/test_db' python -m pinnacledb cdc

    healthcheck:
      test: curl http://localhost:8000/health || exit 1
      interval: 40s
      timeout: 30s
      retries: 10
      start_period: 60s

  cdc-init: # Once finished, CDC is assumed to be ready.
    image: busybox
    depends_on:
      cdc:
        condition: service_healthy


  # Dask Parallel Computation
  # ------------------------------
  dask-scheduler:
    depends_on:
      mongo-init:
        condition: service_completed_successfully
    image: pinnacledb/sandbox
    hostname: scheduler
    ports:
      - "8786:8786" # Peer communication
      - "8787:8787" # HTTP Dashboard
    command:
      - /bin/sh
      - -c
      - |
        pinnacleDB_DATA_BACKEND='mongodb://pinnacle:pinnacle@mongodb:27017/test_db' dask scheduler

  dask-worker:
    depends_on:
      -   dask-scheduler
    image: pinnacledb/sandbox
    command:
      - /bin/sh
      - -c
      - |
        pinnacleDB_DATA_BACKEND='mongodb://pinnacle:pinnacle@mongodb:27017/test_db' dask worker "tcp://scheduler:8786"
    deploy:
      replicas: 1

#  Demo SuperDuperDB Notebooks
#  ------------------------------
#  demo-notebooks:
#    depends_on:
#      - mongo-init
#      - vector-search-init
#      - dask-scheduler
#    build: # Build the latest SuperDuperDB code
#      context: ../../../. # Build from project's root
#      dockerfile: ./images/pinnacledb/Dockerfile
#      args:
#        - BUILD_ENV=sandbox # Use local code
#        - pinnacleDB_EXTRAS=demo # Install dependencies
#    hostname: demo
#    ports:
#      - "8888:8888" # HTTP Notebooks
#    volumes:
#        - ../../../:/app # mount the root path
#    command:
#      - /bin/sh
#      - -c
#      - |
#        jupyter lab --port=8888 --no-browser --ip=0.0.0.0
