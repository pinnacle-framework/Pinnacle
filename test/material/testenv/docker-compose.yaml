version: "3.9"
services:
  # Resolv container hostnames
  # ------------------------------
  host-mapper:
    image: dvdarias/docker-hoster
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
      - /etc/hosts:/tmp/hosts

  # MongoDB Datastore
  # ------------------------------
  mongodb:
    image: mongo:6
    hostname: mongodb
    ports:
      - "27017:27017"
    command : ["/bin/sh", "-c", "mongod --replSet rs0 --port 27017 --bind_ip 0.0.0.0 --dbpath /data/db/"]

  mongo-init: # Once finished, Mongo is assumed to be ready.
    image: mongo:6
    depends_on:
      - mongodb
    volumes:
      - ./mongo-init.sh:/scripts/mongo-init.sh
    env_file: # Read From
    - users.env
    command: sh -c "/scripts/mongo-init.sh"

   # Vector Search Service
   # ------------------------------
  vector-search:
    depends_on:
      - mongo-init
    restart: on-failure        
    build: # Build the latest SuperDuperDB code
      context: ../../../. # Build from project's root
      dockerfile: ./images/pinnacledb/Dockerfile
      args:
        - BUILD_ENV=sandbox # Use local code
        - pinnacleDB_EXTRAS=server,apis # Install dependencies
    hostname: vector-search
    ports:
      - "8000:8000"
    volumes:
        - ../../../:/app # mount the root path
    command:
      - /bin/sh
      - -c
      - |
        # Install the latest version of the code (avoid cached layers).
        cd /app; pip install --user .       
        python -m pinnacledb vector-search
    healthcheck:
      test: curl http://localhost:8000/ || exit 1
      interval: 40s
      timeout: 30s
      retries: 10
      start_period: 60s

  vector-search-init: # Once finished, Vector Search is assumed to be ready.
    image: busybox
    depends_on:
      vector-search:
        condition: service_healthy


  # Dask Parallel Computation
  # ------------------------------
  dask-scheduler:
    depends_on:
      - mongodb
    build: # Build the latest SuperDuperDB code
      context: ../../../. # Build from project's root
      dockerfile: ./images/pinnacledb/Dockerfile
      args:
        - BUILD_ENV=sandbox # Use local code
        - pinnacleDB_EXTRAS=dev # Install dependencies
    hostname: scheduler
    ports:
      - "8786:8786" # Peer communication
      - "8787:8787" # HTTP Dashboard
    volumes:
        - ../../../:/app # mount the root path
    command:
      - /bin/sh
      - -c
      - |
        # Install the latest version of the code (avoid cached layers).
        cd /app; pip install --user .        
        dask scheduler

  dask-worker:
    depends_on:
      -   dask-scheduler
    build: # Build the latest SuperDuperDB code
      context: ../../../. # Build from project's root
      dockerfile: ./images/pinnacledb/Dockerfile
      args:
        - BUILD_ENV=sandbox # Load the local code
        - pinnacleDB_EXTRAS=dev # Install dependencies
    volumes:
        - ../../../:/app # mount the root path
    command:
      - /bin/sh
      - -c
      - |
        # Install the latest version of the code (avoid cached layers).
        cd /app; pip install --user .
        dask worker "tcp://scheduler:8786"
    deploy:
      replicas: 1