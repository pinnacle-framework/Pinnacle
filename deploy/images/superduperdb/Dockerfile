# syntax = docker/dockerfile:experimental

# ---------------
# Global Parameters
# ---------------
# BUILD_ENV choses whether to use local source (sandbox) or released wheel (pypi).
ARG BUILD_ENV=release

# ---------------
# Configure Basic Template
# ---------------
FROM jupyterhub/k8s-singleuser-sample:3.1.0 as base

# Temporarily switch to the root for privileged operations.
# ---------------
USER root

# Install system packages
# ---------------
RUN apt-get update \
 && apt-get upgrade -y \
 && apt-get install -y --no-install-recommends \
        # Required for downloading code/data from the internet \
        wget curl unzip git \
        # DevOps
        vim procps make \
        # Required by OpenCV
        libglib2.0-0 libgl1-mesa-glx \
        # Required for PostgreSQL \
        libpq-dev \
   # Purge apt cache
   && apt-get clean \
   && rm -rf /var/lib/apt/lists/*


# Replace the default Jupyter user with a SuperDuper user
# ---------------
ENV NB_USER=pinnacle \
    NB_UID=1000 \
    HOME=/home/pinnacle

RUN deluser jovyan && rm -rf /home/jovyan \
    && adduser \
        --disabled-password \
        --gecos "SuperDuper User" \
        --uid ${NB_UID} \
        --home ${HOME} \
        --force-badname \
        ${NB_USER}


# Switch to SuperDuper user
# ---------------
WORKDIR ${HOME}
USER ${NB_USER}
ENV PATH="${HOME}/.local/bin:$PATH"


# Install common dependencies
# ---------------
RUN pip install setuptools pip
RUN --mount=type=cache,uid=1000,target=/home/pinnacle/.cache/pip python -m pip install --user \
    # JupyterLab extensions \
    theme-darcula \
    ipywidgets \
    jupyterlab-lsp \
    'python-lsp-server[all]'


# Install Jupyterlab extensions
# ---------------
COPY --chown=pinnacle ./deploy/images/pinnacledb/labextensions/@pinnacledb ${HOME}/.local/share/jupyter/labextensions/@pinnacledb
COPY --chown=pinnacle ./deploy/images/pinnacledb/apputils-extension/themes.jupyterlab-settings ${HOME}/.jupyter/lab/user-settings/@jupyterlab/apputils-extension/themes.jupyterlab-settings


# Volumes
# ---------------
VOLUME /artifacts

# Runtime Configuration
# ---------------

# Don't write .pyc files on the import of source modules.
ENV PYTHONDONTWRITEBYTECODE 1
# Set python cache directory
ENV PYTHONPYCACHEPREFIX "$HOME/.cache/cpython/"



# ---------------
# Build Sandbox
# ---------------
FROM base AS build_sandbox

ONBUILD ARG pinnacleDB_EXTRAS=''
ONBUILD COPY --chown=pinnacle ./ ${HOME}/pinnacledb
ONBUILD WORKDIR ${HOME}/pinnacledb
# Install project dependencies.
ONBUILD RUN --mount=type=cache,uid=1000,target=/home/pinnacle/.cache/pip python -m pip install --user --editable .[${pinnacleDB_EXTRAS}]
# Install user-defined dependencies
ONBUILD RUN --mount=type=cache,uid=1000,target=/home/pinnacle/.cache/pip python -m pip install --user  -r requirements.txt

# ---------------
# Build Release
# ---------------
FROM base AS build_release

ONBUILD ARG pinnacleDB_EXTRAS=''
ONBUILD COPY --chown=pinnacle ${PWD}/examples ./examples
ONBUILD COPY --chown=pinnacle ${PWD}/contrib ./contrib
# Drop cache to reduce image size.
ONBUILD RUN python -m pip install --user pinnacledb[${pinnacleDB_EXTRAS}] \
    # Purge pip cache
    && pip cache purge
ONBUILD WORKDIR ${HOME}/examples

# ---------------
# Select Build
# ---------------
FROM build_${BUILD_ENV}
EXPOSE 8888
ENTRYPOINT ["tini", "--"]
CMD ["jupyter", "lab", "--port=8888", "--no-browser", "--ip=0.0.0.0"]
