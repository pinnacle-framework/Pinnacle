version: "3.9"

# set env variable COMPOSE_PROJECT_NAME and
# label com.docker.compose.project
name: testenv

services:

  # ------------------------------
  # MongoDB Datastore
  # ------------------------------
  mongodb:
    image: mongo:6
    hostname: mongodb
    volumes:
      - ${pinnacleDB_DATA_DIR}:/data/db
    ports:
      - "27017:27017"
    command:
      - /bin/sh
      - -c
      - |      
        mongod --replSet rs0 --port 27017 --bind_ip 0.0.0.0 --dbpath /data/db/ --logpath /dev/null

  mongo-init:
    image: mongo:6
    depends_on:
      - mongodb
    volumes:
      - ./mongo-init.sh:/scripts/mongo-init.sh
    env_file:
    - users.env
    command:
      - /bin/sh
      - -c
      - | 
        /scripts/mongo-init.sh


  #  Logging with Loki
  #  ------------------------------
  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    volumes:
      - ./configs/loki:/etc/loki
    command: -config.file=/etc/loki/loki-local-config.yaml

  promtail:
    depends_on:
        - loki
    image: grafana/promtail:2.9.0
    volumes:
        # Configuration
        - ./configs/promtail:/etc/promtail
        # Read container labels and logs
        - /var/lib/docker/containers:/var/lib/docker/containers:ro
        - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/docker-config.yaml


  #  Monitoring with Prometheus
  #  ------------------------------
  prometheus:
    image: prom/prometheus:v2.7.1
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus:/app.cfg
    command: >-
      --config.file=/app.cfg/prometheus.yml
      --storage.tsdb.path=/prometheus

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    ports:
      - "8080:8080"
    volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:ro
        - /sys:/sys:ro
        - /var/lib/docker/:/var/lib/docker:ro
        - /dev/disk/:/dev/disk:ro

  #  Real-time Dashboards
  #  ------------------------------
  grafana:
    depends_on:
      - loki
    image: grafana/grafana:10.2.2
    ports:
      - "3000:3000"
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_PATHS_PROVISIONING: '/app.cfg/provisioning'
    volumes:
        - ./configs/grafana:/app.cfg

  #  Ray Compute
  #  ------------------------------
  ray-head:
     image: pinnacledb/sandbox
     hostname: ray-head
     ports:
       - "10001:10001" # Peer communication
       - "8265:8265"
       - "6379:6379"
     env_file: users.env
     command:
       - /bin/sh
       - -c
       - |
         PYTHONPATH=/home/pinnacle/pinnacledb:/home/pinnacle/pinnacledb/test/smoke:. ray start --head --dashboard-host=0.0.0.0 --num-cpus=0 --block
     deploy:
       replicas: 1
     volumes:
        - ../../pinnacledb:/home/pinnacle/pinnacledb/pinnacledb # shared between containers
        - ../../test:/home/pinnacle/pinnacledb/test # shared between containers
        - ../../examples:/home/pinnacle/pinnacledb/examples # shared between containers
        - ../../deploy:/home/pinnacle/pinnacledb/deploy # shared between containers

  ray-worker:
    image: pinnacledb/sandbox
    depends_on:
      - ray-head
    volumes:
        - ${pinnacleDB_ARTIFACTS_DIR}:/artifacts:rw,z # shared between containers
        - ../../pinnacledb:/home/pinnacle/pinnacledb/pinnacledb # shared between containers
        - ../../test:/home/pinnacle/pinnacledb/test # shared between containers
        - ../../examples:/home/pinnacle/pinnacledb/examples # shared between containers
        - ../../deploy:/home/pinnacle/pinnacledb/deploy # shared between containers
    command:
       - /bin/bash
       - -c
       - |
         PYTHONPATH=/home/pinnacle/pinnacledb:. ray start --address=ray-head:6379  --block
         fswatch -o --recursive /home/pinnacle/pinnacledb/pinnacledb | while read change; do
           echo "Detected change in pinnacledb, restarting ray worker..."
           pkill -f 'ray start --address=ray-head:6379 --block'
           RAY_ENABLE_WINDOWS_OR_OSX_CLUSTER=1 PYTHONPATH=/home/pinnacle/pinnacledb:/home/pinnacle/pinnacledb/test/smoke:. ray start --address=ray-head:6379 --block
         done
    deploy:
      mode: replicated
      replicas: 2

   # Vector Search Service
   # ------------------------------
  vector-search:
    depends_on:
      mongo-init:
        condition: service_completed_successfully
      ray-head:
        condition: service_started
    image: pinnacledb/sandbox
    hostname: vector-search
    ports:
      - "8000:8000"
    env_file: users.env
    volumes:
        - ${pinnacleDB_ARTIFACTS_DIR}:/artifacts:rw,z # shared between containers
        - ../../pinnacledb:/home/pinnacle/pinnacledb/pinnacledb # shared between containers
        - ../../test:/home/pinnacle/pinnacledb/test # shared between containers
        - ../../examples:/home/pinnacle/pinnacledb/examples # shared between containers
        - ../../deploy:/home/pinnacle/pinnacledb/deploy # shared between containers
    command:
      - /bin/bash
      - -c
      - |
        python -m uvicorn pinnacledb.vector_search.server.deployed_app:app.app --host 0.0.0.0 --reload --reload-dir /home/pinnacle/pinnacledb/pinnacledb --port 8000

    healthcheck:
      test: curl http://localhost:8000/health || exit 1
      interval: 40s
      timeout: 30s
      retries: 10
      start_period: 60s

  vector-search-init: # Once finished, Vector Search is assumed to be ready.
    image: busybox
    depends_on:
      vector-search:
        condition: service_healthy


   # Change Data Capture Service
   # ------------------------------
  cdc:
    depends_on:
      mongo-init:
        condition: service_completed_successfully
      ray-head:
        condition: service_started
    image: pinnacledb/sandbox
    hostname: cdc
    ports:
      - "8001:8001"
    env_file: users.env
    volumes:
        - ${pinnacleDB_ARTIFACTS_DIR}:/artifacts:rw,z # shared between containers
        - ../../pinnacledb:/home/pinnacle/pinnacledb/pinnacledb # shared between containers
        - ../../test:/home/pinnacle/pinnacledb/test # shared between containers
        - ../../examples:/home/pinnacle/pinnacledb/examples # shared between containers
        - ../../deploy:/home/pinnacle/pinnacledb/deploy # shared between containers
    command:
      - /bin/bash
      - -c
      - |
        python -m uvicorn pinnacledb.cdc.deployed_app:app.app --host 0.0.0.0 --reload --reload-dir /home/pinnacle/pinnacledb/pinnacledb --port 8001
    healthcheck:
      test: curl http://localhost:8001/health || exit 1
      interval: 40s
      timeout: 30s
      retries: 10
      start_period: 60s

  cdc-init:
    image: busybox
    depends_on:
      cdc:
        condition: service_healthy

   # Change Data Capture Service
   # ------------------------------
  rest:
    depends_on:
      mongo-init:
        condition: service_completed_successfully
    image: pinnacledb/sandbox
    hostname: rest
    ports:
      - "8002:8002"
    env_file: users.env
    volumes:
        - ${pinnacleDB_ARTIFACTS_DIR}:/artifacts:rw,z # shared between containers
        - ../../pinnacledb:/home/pinnacle/pinnacledb/pinnacledb # shared between containers
        - ../../test:/home/pinnacle/pinnacledb/test # shared between containers
        - ../../examples:/home/pinnacle/pinnacledb/examples # shared between containers
        - ../../deploy:/home/pinnacle/pinnacledb/deploy # shared between containers
    command:
      - /bin/bash
      - -c
      - |
        python -m uvicorn pinnacledb.rest.deployed_app:app.app --host 0.0.0.0 --reload --reload-dir /home/pinnacle/pinnacledb/pinnacledb --port 8002
    healthcheck:
      test: curl http://localhost:8002/health || exit 1
      interval: 40s
      timeout: 30s
      retries: 10
      start_period: 60s

  rest-init:
    image: busybox
    depends_on:
      rest:
        condition: service_healthy

  #  Demo SuperDuperDB Notebooks
  #  ------------------------------
  sandbox:
    image: pinnacledb/sandbox
    hostname: sandbox
    depends_on:
      mongo-init:
        condition: service_completed_successfully
      vector-search-init:
        condition: service_completed_successfully
      cdc-init:
        condition: service_completed_successfully
      rest-init:
        condition: service_completed_successfully
      ray-head:
        condition: service_started
    ports:
      - "8888:8888" # HTTP Notebooks
    volumes:
        - ${pinnacleDB_ARTIFACTS_DIR}:/artifacts:rw,z # shared between containers
        - ../../pinnacledb:/home/pinnacle/pinnacledb/pinnacledb # shared between containers
        - ../../test:/home/pinnacle/pinnacledb/test # shared between containers
        - ../../examples:/home/pinnacle/pinnacledb/examples # shared between containers
        - ../../deploy:/home/pinnacle/pinnacledb/deploy # shared between containers
    env_file: users.env
    command:
      - /bin/sh
      - -c
      - |
        jupyter lab --port=8888 --no-browser --ip=0.0.0.0 --NotebookApp.token=''
    healthcheck:
      test: curl http://localhost:8888 || exit 1
      interval: 40s
      timeout: 30s
      retries: 10
      start_period: 60s

  sandbox-init:
    image: busybox
    depends_on:
      sandbox:
        condition: service_healthy
