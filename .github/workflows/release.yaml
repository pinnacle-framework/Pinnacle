name: Release
on:
  workflow_dispatch:  # allows triggering a github action manually - see 'Actions' tab

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
        run:
          shell: bash
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      
      - name: Set up Python 3.8
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
 
      - name: Install dependencies
        run: python -m pip install --upgrade build

      - name: Build
        run: python -m build

        # smoke-test that build is valid
      - name: Check wheel contents
        run: |
          python -m pip install check-wheel-contents
          check-wheel-contents dist
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          path: ./dist

  test-build:
    needs: ['build']
    runs-on: ubuntu-latest
    steps:

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
              
        # Artifacts located in artifact/
      - name: Download artifact
        uses: actions/download-artifact@v3

      - name: Install wheel
        run: python -m pip install artifact/*.whl
      
        # smoke-tests that check imports
      - name: Check imports
        # these modules cover most of the imports for the core package
        # Note: if these modules are renamed, please update this list
        run: |
          python -m pinnacledb.db.base.db
          python -m pinnacledb.db.base.backends
          python -m pinnacledb.container.model 

      - name: Set version for tagging
        id: set-version
        run: |
          export PACKAGE_VERSION=$(python -c "import pinnacledb as s; print(s.__version__)")
          echo "package_version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT 

    outputs:
      package_version: ${{ steps.set-version.outputs.package_version }}
  
  create-release:
    needs: ['test-build']
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      
        # Artifacts located in artifact/
      - name: Download artifact
        uses: actions/download-artifact@v3

      - name: create release
        run: >
          gh release create ${{ needs.test-build.outputs.package_version }}
          --repo ${{ github.repository }} --generate-notes
          artifact/*
        env:
          GH_TOKEN: ${{ github.token }}

  publish-pypi:
    needs: ['create-release']
    # Environment waits for approval before attempting to upload to PyPI.
    # This allows reviewing the files in the release on GitHub.
    environment: publish-pypi
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v3
      # Try uploading to Test PyPI first, in case something fails.
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: artifact/
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: artifact/
