name: Nightly Repo Checks

on:
  schedule:
    # Triggers the workflow every day at 0130 UTC
    - cron: "30 1 * * *"
  workflow_dispatch:

jobs:
    #---------------------------------------------------
    # Repo Analytics
    #---------------------------------------------------
    repo-analytics:
      runs-on: ubuntu-22.04
      environment: "analytics"
      steps:
        - uses: jgehrcke/github-repo-stats@HEAD
          with:
            ghtoken: ${{ secrets.GH_TOKEN_ANALYTICS }}

    #---------------------------------------------------
    # Check for broken links in *md files
    #---------------------------------------------------
#    markdown-link-check:
#      runs-on: ubuntu-latest
#      steps:
#      - uses: actions/checkout@master
#      - name: Create configuration for handling relative paths
#        # regex validation: https://regex101.com/r/L2M2wa/1
#        run: |
#          cat <<EOF > mlc_config.json
#          {
#            "replacementPatterns": [
#              {
#              "pattern": "^[./]",
#              "replacement": "{{BASEURL}}/"
#              }
#              ]
#          }
#          EOF
#      - uses: gaurav-nelson/github-action-markdown-link-check@v1
#        with:
#          config-file: 'mlc_config.json'


    #---------------------------------------------------
    # Check ImportsLinting and Testing
    #---------------------------------------------------
    # Checks imports using latest versions of dependencies for the core package.
    check-imports:
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
              os: [ "ubuntu-latest", "windows-latest", "macos-latest" ]
              python-version: ["3.8"]
        defaults:
            run:
              shell: bash
        steps:
            - name: Check out repository
              uses: actions/checkout@v3

            - name: Set up Python ${{ matrix.python-version }}
              id: setup-python
              uses: actions/setup-python@v4
              with:
                python-version: ${{ matrix.python-version }}

            - name: Install latest versions of core dependencies.
              run: |
                python3 -m pip install --upgrade pip-tools
                python3 -m pip install .
  

    #---------------------------------------------------
    # Test External Dependencies
    #---------------------------------------------------
    # Run tests using latest versions of dependencies for the dev environment.
    test-latest-dev-deps:
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
              os: [ "ubuntu-latest" ]  # TODO: add "windows-latest", "macos-latest" when Docker removed
              python-version: ["3.8"]
        defaults:
            run:
              shell: bash
        steps:
            - name: Check out repository
              uses: actions/checkout@v3

            - name: Set up Python ${{ matrix.python-version }}
              id: setup-python
              uses: actions/setup-python@v4
              with:
                python-version: ${{ matrix.python-version }}

            - name: Install latest versions of developer dependencies
              run: |
                python3 -m pip install --upgrade pip-tools
                python3 -m pip install .[dev]

            - name: Run tests
              run: make test

    #---------------------------------------------------
    # Test Notebooks
    #---------------------------------------------------
    test-notebooks:
      runs-on: ubuntu-latest
      steps:
        - name: Check out code
          uses: actions/checkout@v3

        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: 3.8  # Adjust the Python version as needed

        - name: Cache pip packages
          uses: actions/cache@v3
          with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
            restore-keys: |
              ${{ runner.os }}-pip-

        - name: Install SuperDuperDB
          run: |
            # Install project and dependencies from pyproject.toml
            pip install .[tests]

        - name: Run pytest on changed files
          env:
            # set credentials for OpenAI
            OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          run: |
            # List Jupyter notebooks
            NOTEBOOKS=./examples

            # Check if there are any changes
            if [ ! -e "${NOTEBOOKS}" ]; then
              echo "Notebook path does not exist."
            else 
              make test_notebooks NOTEBOOKS=${NOTEBOOKS}
            fi
