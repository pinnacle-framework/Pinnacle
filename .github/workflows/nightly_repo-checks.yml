name: Nightly Repo Checks

on:
  schedule:
    # Triggers the workflow every day at 0130 UTC
    - cron: "30 1 * * *"
  workflow_dispatch:

jobs:
    #---------------------------------------------------
    # Repo Analytics
    #---------------------------------------------------
    repo-analytics:
      runs-on: ubuntu-22.04
      environment: "analytics"
      steps:
        - uses: jgehrcke/github-repo-stats@HEAD
          with:
            ghtoken: ${{ secrets.GH_TOKEN_ANALYTICS }}

    #---------------------------------------------------
    # Check for broken links in *md files
    #---------------------------------------------------
#    markdown-link-check:
#      runs-on: ubuntu-latest
#      steps:
#      - uses: actions/checkout@master
#      - name: Create configuration for handling relative paths
#        # regex validation: https://regex101.com/r/L2M2wa/1
#        run: |
#          cat <<EOF > mlc_config.json
#          {
#            "replacementPatterns": [
#              {
#              "pattern": "^[./]",
#              "replacement": "{{BASEURL}}/"
#              }
#              ]
#          }
#          EOF
#      - uses: gaurav-nelson/github-action-markdown-link-check@v1
#        with:
#          config-file: 'mlc_config.json'


    #---------------------------------------------------
    # Notebook Testing
    #---------------------------------------------------
    notebook-testing:
      runs-on: ${{ matrix.os }}
      strategy:
        fail-fast: false
        matrix:
          os: [ "ubuntu-latest" ]  # TODO: add "windows-latest", "macos-latest" when Docker removed
          python-version: [ "3.8",  "3.11" ] # Due to cache limitations, check only the earliest and the latest.

      steps:
        - name: Check out repository
          uses: actions/checkout@v3

        #---------------------------------------------------
        # Configuring Python environments.
        #
        # We intentionally commented the `cache` field to remind us not to enable it.
        # The reason is that most of the time is spent on package installation rather than package downloading.
        # As a result, in the next step, we will cache the complete Python environment, including all pre-installed components.
        - name: Set up Python ${{ matrix.python-version }}
          id: setup-python
          uses: actions/setup-python@v4
          with:
            python-version: ${{ matrix.python-version }}
            #cache: 'pip' # Do not activate

        - name: Cache Python ${{ matrix.python-version }}
          uses: actions/cache@v3
          with:
            path: ${{ env.pythonLocation }}
            key: ${{  matrix.os }}_python-${{  matrix.python-version }}_${{ hashFiles('pyproject.toml') }}
        #---------------------------------------------------

        - name: Install Demo Dependencies
          run: python -m pip install .[demo]

        - name: Run notebook testing
          env:
            OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          run: |
              make test_notebooks NOTEBOOKS=./examples
