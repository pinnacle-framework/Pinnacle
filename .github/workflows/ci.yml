name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # allows you to trigger manually

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: ["3.8"]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - -y
      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Configure poetry
        run: poetry config virtualenvs.in-project true  
      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: |  
            # Using `timeout` is a safeguard against the Poetry command hanging for some reason.
            timeout 10s poetry run pip --version || rm -rf .venv 
      - name: Install dependencies
        run: poetry install
      - name: Test
        run: |
          poetry run make test
